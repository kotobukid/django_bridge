// Klass data: (id, cat1, cat2, cat3, bit_position)
pub type KlassStatic = (i64, &'static str, &'static str, &'static str, u32);
pub const KLASS_LIST: &[KlassStatic; 63] = &[
    (30, "奏像", "天使", "", 0),
    (31, "奏像", "悪魔", "", 1),
    (32, "奏像", "美巧", "", 2),
    (33, "奏像", "英知", "", 3),
    (34, "奏像", "武勇", "", 4),
    (35, "奏像", "プリパラ", "", 5),
    (36, "奏武", "アーム", "", 6),
    (37, "奏武", "ウェポン", "", 7),
    (38, "奏武", "遊具", "", 8),
    (39, "奏武", "毒牙", "", 9),
    (40, "奏武", "トリック", "", 10),
    (41, "奏武", "ブルアカ", "", 11),
    (42, "奏羅", "宝石", "", 12),
    (43, "奏羅", "植物", "", 13),
    (44, "奏羅", "原子", "", 14),
    (45, "奏羅", "宇宙", "", 15),
    (46, "奏羅", "微菌", "", 16),
    (47, "奏械", "電機", "", 17),
    (48, "奏械", "古代兵器", "", 18),
    (49, "奏械", "迷宮", "", 19),
    (50, "奏械", "調理", "", 20),
    (51, "奏械", "乗機", "", 21),
    (52, "奏械", "バーチャル", "", 22),
    (53, "奏械", "電音部", "", 23),
    (54, "奏生", "水獣", "", 24),
    (55, "奏生", "空獣", "", 25),
    (56, "奏生", "地獣", "", 26),
    (57, "奏生", "龍獣", "", 27),
    (58, "奏生", "凶蟲", "", 28),
    (59, "奏生", "怪異", "", 29),
    (60, "奏元", "", "", 30),
    (61, "解放派", "", "", 31),
    (62, "闘争派", "", "", 32),
    (63, "防衛派", "", "", 33),
    (1, "精像", "天使", "", 34),
    (2, "精像", "悪魔", "", 35),
    (3, "精像", "美巧", "", 36),
    (4, "精像", "英知", "", 37),
    (5, "精像", "武勇", "", 38),
    (6, "精武", "アーム", "", 39),
    (7, "精武", "ウェポン", "", 40),
    (8, "精武", "遊具", "", 41),
    (9, "精武", "毒牙", "", 42),
    (10, "精武", "トリック", "", 43),
    (11, "精羅", "鉱石", "", 44),
    (12, "精羅", "宝石", "", 45),
    (13, "精羅", "植物", "", 46),
    (14, "精羅", "原子", "", 47),
    (15, "精羅", "宇宙", "", 48),
    (16, "精羅", "微菌", "", 49),
    (17, "精械", "電機", "", 50),
    (18, "精械", "古代兵器", "", 51),
    (19, "精械", "迷宮", "", 52),
    (20, "精械", "調理", "", 53),
    (21, "精械", "乗機", "", 54),
    (22, "精械", "紅蓮", "", 55),
    (23, "精生", "水獣", "", 56),
    (24, "精生", "空獣", "", 57),
    (25, "精生", "地獣", "", 58),
    (26, "精生", "龍獣", "", 59),
    (27, "精生", "凶蟲", "", 60),
    (28, "精生", "怪異", "", 61),
    (29, "精元", "", "", 62),
];

// Klass bit flag utilities
pub fn klass_ids_to_bits(klass_ids: &[i64]) -> u64 {
    let mut bits = 0u64;
    for &klass_id in klass_ids {
        if let Some(bit_pos) = get_klass_bit_position(klass_id) {
            bits |= 1u64 << bit_pos;
        }
    }
    bits
}

pub fn get_klass_bit_position(klass_id: i64) -> Option<u32> {
    KLASS_LIST.iter().find(|k| k.0 == klass_id).map(|k| k.4)
}

pub fn has_klass_bits(card_klass_bits: u64, filter_klass_bits: u64) -> bool {
    (card_klass_bits & filter_klass_bits) != 0
}

// Generate bit mask for display labels
pub fn get_klass_display_name(klass_id: i64) -> Option<String> {
    KLASS_LIST.iter().find(|k| k.0 == klass_id).map(|k| {
        if !k.2.is_empty() && !k.3.is_empty() {
            format!("{}:{}/{}", k.1, k.2, k.3)
        } else if !k.2.is_empty() {
            format!("{}:{}", k.1, k.2)
        } else {
            k.1.to_string()
        }
    })
}
