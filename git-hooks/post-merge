#!/bin/bash
# post-merge hook - マイグレーション要求の通知
#
# このフックはgit pullやgit mergeの後に自動的に実行されます。
# "[MIGRATION REQUIRED]"を含むコミットメッセージを検出して通知します。

# カラー定義（TTY環境でのみ使用）
if [ -t 1 ]; then
    RED='\033[0;31m'
    YELLOW='\033[1;33m'
    GREEN='\033[0;32m'
    NC='\033[0m' # No Color
else
    RED=''
    YELLOW=''
    GREEN=''
    NC=''
fi

# 環境判定とタイムアウト設定
if [ -t 0 ] && [ -t 1 ]; then
    # 対話的環境（ローカル開発）
    INTERACTIVE=true
    TIMEOUT=10
else
    # 非対話的環境（CI/CD等）
    INTERACTIVE=false
    TIMEOUT=0
fi

# マイグレーション要求のチェック
check_migration_required() {
    # ORIG_HEAD..HEAD: マージ前からマージ後までの新しいコミット
    local migration_commits=$(git log ORIG_HEAD..HEAD --grep="\[MIGRATION REQUIRED\]" --oneline 2>/dev/null)
    
    if [ -n "$migration_commits" ]; then
        echo ""
        echo "================================================"
        echo -e "${YELLOW}⚠️  MIGRATION REQUIRED${NC}"
        echo "================================================"
        echo ""
        echo "以下のコミットでマイグレーションが必要とされています："
        echo ""
        echo "$migration_commits" | while IFS= read -r line; do
            echo "  • $line"
        done
        echo ""
        echo -e "${GREEN}実行が必要なコマンド:${NC}"
        echo ""
        echo "  cd table_definition/"
        echo "  source .venv/bin/activate"
        echo "  python manage.py migrate"
        echo ""
        echo "または:"
        echo ""
        echo "  table_definition/.venv/bin/python table_definition/manage.py migrate"
        echo ""
        
        if [ "$INTERACTIVE" = true ]; then
            echo -e "${YELLOW}続行するにはEnterキーを押してください（${TIMEOUT}秒後に自動的に続行）...${NC}"
            # read -t でタイムアウト設定、|| true でタイムアウト時もエラーにしない
            read -t $TIMEOUT -r || true
        else
            echo "(非対話的環境のため自動的に続行します)"
        fi
        
        echo "================================================"
        echo ""
    fi
}

# メイン処理
# エラーが発生してもフックは正常終了する（git pullを妨げない）
check_migration_required || true

# フックは常に正常終了
exit 0