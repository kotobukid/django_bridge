[config]
default_to_workspace = false

[env]
BACKEND_PORT = 8002
DJANGO_ADMIN_PORT = 8003

[tasks.server]
description = "Run Axum server"
env = { "WEB_PORT" = "${BACKEND_PORT}", "DJANGO_ADMIN_PORT" = "${DJANGO_ADMIN_PORT}" }
script = [
    "cd server",
    "cargo run"
]

[tasks.fixed_data_server]
description = "FixedDataサーバーを起動 (手動フィーチャー修正用)"
command = "cargo"
args = ["run", "-p", "fixed_data_server"]

[tasks.static]
description = "DBに保存済みのデータをRustコードとして書き出す"
script = [
    "cd static_generator",
    "cargo run --release"
]

[tasks.manage]
description = "Django manage.pyの拡張コマンドを実行"
args = ["./table_definition/manage.py", "${@}"]
command = "python"

[tasks.syncdb]
description = "Djangoのモデルの変更をRustのコードに追従させる"
command = "cargo"
env = { "CARGO_MANIFEST_DIR" = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/webapp" }
args = [
    "run",
    "--package",
    "syncdb"
]

[tasks.generate]
description = "Run npm run generate in the ./front Nuxt.js project"
cwd = "./front"
command = "npm"
args = ["run", "generate"]

[tasks.front_server]
description = "Run npm run dev in the ./front Nuxt.js project"
cwd = "./front"
command = "npm"
args = ["run", "dev"]
env = { "WEB_PORT" = "${BACKEND_PORT}" }

[tasks.rule_editor]
description = "Run rule_editor in CLI mode"
command = "cargo"
args = ["run", "-p", "rule_editor"]

[tasks.rule_editor_gui]
description = "Run rule_editor Tauri application in development mode (requires system deps)"
cwd = "./rule_editor"
command = "cargo"
args = ["tauri", "dev", "--features", "gui"]

[tasks.rule_editor_build]
description = "Build rule_editor for CLI mode"
command = "cargo"
args = ["build", "-p", "rule_editor", "--release"]

[tasks.rule_editor_gui_build]
description = "Build rule_editor Tauri application for production (requires system deps)"
cwd = "./rule_editor"
command = "cargo"
args = ["tauri", "build", "--features", "gui"]

[tasks.rule_editor_deps]
description = "Install rule_editor frontend dependencies"
cwd = "./rule_editor/ui"
command = "npm"
args = ["install"]

[tasks.export_patterns]
description = "Export rule patterns to Rust code"
command = "cargo"
args = ["run", "-p", "rule_editor", "--", "export"]

[tasks.trunk_serve]
description = "Leptosアプリ開発サーバーを起動"
cwd = "./wasm_front"
command = "trunk"
args = ["serve"]

[tasks.trunk_build]
description = "Leptosアプリをビルド（AIエージェントに示す）"
cwd = "./wasm_front"
command = "trunk"
args = ["build"]

[tasks.trunk_release]
cwd = "./wasm_front"
command = "trunk"
args = ["build", "--release", "--minify"]

[tasks.trunk_pages]
description = "Github Pages用にビルドする"
cwd = "./wasm_front"
command = "trunk"
args = ["build", "--release", "--minify", "--config", "Trunk-pages.toml"]

[tasks.scraper]
description = "WIXOSSカード情報をスクレイピングしてデータベースに保存 (例: cargo make scraper booster WXDi-P16)"
command = "cargo"
args = [
    "run",
    "--release",
    "--package",
    "wxdb-scraper",
    "--",
    "${@}"
]

[tasks.scraper-fast]
description = "高速スクレイピング（遅延時間短縮）"
command = "cargo"
args = [
    "run",
    "--release",
    "--package",
    "wxdb-scraper",
    "--",
    "${@}",
    "--min-delay", "200",
    "--max-delay", "800"
]

[tasks.analyze]
description = "カード番号を指定して再解析"
command = "cargo"
args = [
    "run",
    "-p",
    "analyzer",
    "--",
    "--card-number",
    "${@}",
    "--force"
]
[tasks.analyze_all]
description = "DB保存済みの全カードを(再)解析"
command = "cargo"
args = [
    "run",
    "-p",
    "analyzer",
    "--",
    "--batch-size",
    "20",
    "--limit",
    "10000",
    "--force"
]
[tasks.wasm_linux]
description = "build wasm by wasm-pack (debug build) and organize files"
script = '''
mkdir -p front/static/pkg 2>/dev/null
cd datapack && wasm-pack build --target web --out-dir ../front/public/pkg && cd ..
mv front/public/pkg/datapack.d.ts front/static/pkg/datapack.d.ts
mv front/public/pkg/datapack.js front/static/pkg/datapack.js
mv front/public/pkg/datapack_bg.wasm.d.ts front/static/pkg/datapack_bg.wasm.d.ts
mv front/public/pkg/package.json front/static/pkg/package.json
cp front/public/pkg/.gitignore front/static/pkg/.gitignore
'''
