use crate::AppState;
use crate::models::rule_pattern::RulePattern;
use serde::{Deserialize, Serialize};
use tauri::State;

#[derive(Debug, Serialize, Deserialize)]
pub struct SavePatternRequest {
    pub keyword: String,
    pub pattern: String,
    pub features: Vec<String>,
    pub positive_examples: Vec<String>,
    pub negative_examples: Vec<String>,
}

#[tauri::command]
pub async fn save_pattern(
    request: SavePatternRequest,
    state: State<'_, AppState>,
) -> Result<i32, String> {
    let pool = &state.pool;
    
    let query = r#"
        INSERT INTO wix_rule_pattern 
        (keyword, pattern, features, positive_examples, negative_examples)
        VALUES ($1, $2, $3, $4, $5)
        RETURNING id
    "#;
    
    let row = sqlx::query_as::<_, (i32,)>(query)
        .bind(&request.keyword)
        .bind(&request.pattern)
        .bind(&request.features)
        .bind(&request.positive_examples)
        .bind(&request.negative_examples)
        .fetch_one(pool.as_ref())
        .await
        .map_err(|e| format!("Failed to save pattern: {}", e))?;
    
    Ok(row.0)
}

#[tauri::command]
pub async fn get_saved_patterns(
    state: State<'_, AppState>,
) -> Result<Vec<RulePattern>, String> {
    let pool = &state.pool;
    
    let query = r#"
        SELECT id, keyword, pattern, features, positive_examples, 
               negative_examples, created_at, updated_at, is_active
        FROM wix_rule_pattern
        WHERE is_active = true
        ORDER BY created_at DESC
    "#;
    
    let patterns = sqlx::query_as::<_, RulePattern>(query)
        .fetch_all(pool.as_ref())
        .await
        .map_err(|e| format!("Failed to fetch patterns: {}", e))?;
    
    Ok(patterns)
}

#[tauri::command]
pub async fn export_patterns(
    state: State<'_, AppState>,
) -> Result<String, String> {
    let patterns = get_saved_patterns(state).await?;
    
    let mut output = String::from("// Auto-generated by rule_editor\n");
    output.push_str("// このファイルは自動生成されています。直接編集しないでください。\n\n");
    
    // detect_pattern! マクロを使った形式で出力
    for pattern in patterns {
        let features_str = pattern.features
            .iter()
            .map(|f| format!("CardFeature::{}", f))
            .collect::<Vec<_>>()
            .join(", ");
        
        output.push_str(&format!(
            "detect_pattern![r\"{}\", {}], // {}\n",
            pattern.pattern.replace("\"", "\\\""),
            features_str,
            pattern.keyword
        ));
    }
    
    Ok(output)
}