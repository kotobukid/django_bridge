//! スキルテキストレンダリングコンポーネント
//! 
//! 符号化されたスキルテキストを解析し、テキストとアイコンコンポーネントを組み合わせて表示する。

use leptos::prelude::*;
use icon_encoder::{decode_skill_text, TextSegment};

/// スキルテキストレンダリングコンポーネント
/// 
/// 符号化されたスキルテキストを受け取り、アイコンコンポーネントと組み合わせてレンダリングする。
/// 
/// # Props
/// * `skill_text` - 符号化済みスキルテキスト（例："[c]：効果を発動する"）
#[component]
pub fn SkillTextRenderer(
    /// 符号化済みスキルテキスト
    skill_text: String,
) -> impl IntoView {
    let segments = decode_skill_text(&skill_text);
    
    view! {
        <span class="skill-text">
            {segments.into_iter().map(|segment| {
                match segment {
                    TextSegment::Text(text) => {
                        view! { 
                            <span class="text-content">{text}</span> 
                        }.into_any()
                    },
                    TextSegment::Icon { code, component } => {
                        render_icon_component(&component, &code)
                    }
                }
            }).collect_view()}
        </span>
    }
}

/// ライフバーストテキストレンダリングコンポーネント
/// 
/// 符号化されたライフバーストテキストを受け取り、アイコンコンポーネントと組み合わせてレンダリングする。
/// 
/// # Props
/// * `burst_text` - 符号化済みライフバーストテキスト
#[component]
pub fn BurstTextRenderer(
    /// 符号化済みライフバーストテキスト
    burst_text: String,
) -> impl IntoView {
    // ライフバーストテキストもスキルテキストと同じ処理を使用
    view! {
        <SkillTextRenderer skill_text=burst_text />
    }
}

/// アイコンコンポーネントを定義し、レンダリング関数を自動生成するマクロ
/// 
/// # 使用例
/// ```
/// define_icon_components! {
///     "IconCip" => IconCip(),
///     "IconAuto" => IconAuto(),
///     // ...
/// }
/// ```
macro_rules! define_icon_components {
    ($($component_name:literal => $component_func:ident()),* $(,)?) => {
        /// アイコンコンポーネントをレンダリングする（マクロで自動生成）
        /// 
        /// コンポーネント名に基づいて適切なアイコンコンポーネントを返す。
        /// 
        /// # Arguments
        /// * `component_name` - コンポーネント名（例："IconCip"）
        /// * `code` - アイコンコード（例："c"）
        /// 
        /// # Returns
        /// アイコンコンポーネントまたはフォールバック表示
        fn render_icon_component(component_name: &str, code: &str) -> leptos::prelude::AnyView {
            match component_name {
                $(
                    $component_name => view! { <$component_func /> }.into_any(),
                )*
                // 未知のコンポーネント名の場合はフォールバック表示
                _ => view! { 
                    <span class="icon-fallback bg-gray-200 text-gray-600 px-1 py-0.5 rounded text-xs" title=format!("Unknown icon: {}", component_name)>
                        {format!("[{}]", code)}
                    </span> 
                }.into_any(),
            }
        }
    };
}

/// アイコンコンポーネントとその実装を一括定義するマクロ
/// 
/// # 使用例
/// ```
/// define_icon_with_impl! {
///     IconNewFeature, "IconNewFeature" => {
///         view! {
///             <span class="inline-block w-5 h-5 bg-purple-500 text-white text-xs font-bold rounded text-center leading-5" title="【新機能】">
///                 "新"
///             </span>
///         }
///     }
/// }
/// ```
macro_rules! define_icon_with_impl {
    ($($component_func:ident, $component_name:literal => $impl_block:block),* $(,)?) => {
        $(
            #[component]
            fn $component_func() -> impl IntoView {
                $impl_block
            }
        )*
        
        // 既存のdefine_icon_components!に新しいコンポーネントを追加
        // （注意：既存のマクロ呼び出しを手動で更新する必要があります）
    };
}

// アイコンコンポーネントの定義とレンダリング関数の自動生成
define_icon_components! {
    // タイミングアイコン
    "IconCip" => IconCip(),
    "IconBondCip" => IconBondCip(),
    "IconBondAuto" => IconBondAuto(),
    "IconBondPassive" => IconBondPassive(),
    "IconBondActivated" => IconBondActivated(),
    "IconAuto" => IconAuto(),
    "IconActivated" => IconActivated(),
    "IconPassive" => IconPassive(),

    "IconOnceTurn" => IconOnceTurn(),
    "IconOnceGame" => IconOnceGame(),

    "IconMyTurn" => IconMyTurn(),
    "IconOpponentTurn" => IconOpponentTurn(),

    "IconDown" => IconDown(),
    "IconCross" => IconCross(),


    // アビリティアイコン
    "IconGuard" => IconGuard(),
    "IconLifeBurst2" => IconLifeBurst2(),
    
    // ゲームメカニクスアイコン
    "IconTeam" => IconTeam(),
    "IconLifeBurst" => IconLifeBurst(),
    "IconRecollect" => IconRecollect(),
    
    // コラボアイコン
    "IconPripara" => IconPripara(),
    "IconNijisanji" => IconNijisanji(),
    "IconDissona" => IconDissona(),
    "IconDenonbu" => IconDenonbu(),
    "IconBlueArchive" => IconBlueArchive(),
}

// アイコンコンポーネントの定義
// 実際の実装では svg_definition.rs の既存アイコンを流用したり、新しいアイコンを定義したりする

/// 【出】アイコン（Comes into play）
#[component]
fn IconCip() -> impl IntoView {
    view! {
        <svg class="inline-block" width="1rem" height="1rem" viewBox="0 0 70 64" style="vertical-align: middle; position: relative; top: -1px;" title="【出】">
            <path d="M 0.622 64 L 0.622 0 L 58.6 0 L 69.846 32 L 58.6 64 L 0.622 64 Z" style="fill: white; stroke-width: 1.074;"></path>
            <rect width="69.705" height="64" style="fill: none; stroke-width: 0.974;"></rect>
            <path d="M 3.017 61.786 L 3.017 2.214 L 56.983 2.214 L 67.451 32 L 56.983 61.786 L 3.017 61.786 Z" style="stroke-width: 1; fill: rgb(0, 98, 241);"></path>
            <path d="M 7.413 53.977 L 7.413 36.789 Q 7.413 35.933 7.927 35.419 Q 8.441 34.905 9.297 34.905 L 14.265 34.905 Q 15.121 34.905 15.635 35.419 Q 16.149 35.933 16.149 36.789 L 16.149 45.754 Q 16.149 46.611 16.663 47.125 Q 17.177 47.638 18.033 47.638 L 25.228 47.638 Q 26.084 47.638 26.598 47.125 Q 27.112 46.611 27.112 45.754 L 27.112 34.277 Q 27.112 33.421 26.598 32.907 Q 26.084 32.393 25.228 32.393 L 11.124 32.393 Q 10.268 32.393 9.754 31.879 Q 9.24 31.365 9.24 30.508 L 9.24 12.465 Q 9.24 11.608 9.754 11.094 Q 10.268 10.581 11.124 10.581 L 16.377 10.581 Q 17.234 10.581 17.748 11.094 Q 18.262 11.608 18.262 12.465 L 18.262 22.457 Q 18.262 23.314 18.776 23.828 Q 19.29 24.342 20.146 24.342 L 25.228 24.342 Q 26.084 24.342 26.598 23.828 Q 27.112 23.314 27.112 22.457 L 27.112 8.239 Q 27.112 7.383 27.626 6.869 Q 28.14 6.355 28.997 6.355 L 34.078 6.355 Q 34.935 6.355 35.449 6.869 Q 35.963 7.383 35.963 8.239 L 35.963 22.457 Q 35.963 23.314 36.477 23.828 Q 36.991 24.342 37.847 24.342 L 42.815 24.342 Q 43.671 24.342 44.185 23.828 Q 44.699 23.314 44.699 22.457 L 44.699 12.465 Q 44.699 11.608 45.213 11.094 Q 45.727 10.581 46.583 10.581 L 51.894 10.581 Q 52.75 10.581 53.264 11.094 Q 53.778 11.608 53.778 12.465 L 53.778 30.508 Q 53.778 31.365 53.264 31.879 Q 52.75 32.393 51.894 32.393 L 37.847 32.393 Q 36.991 32.393 36.477 32.907 Q 35.963 33.421 35.963 34.277 L 35.963 45.754 Q 35.963 46.611 36.477 47.125 Q 36.991 47.638 37.847 47.638 L 45.099 47.638 Q 45.955 47.638 46.469 47.125 Q 46.983 46.611 46.983 45.754 L 46.983 36.789 Q 46.983 35.933 47.497 35.419 Q 48.011 34.905 48.867 34.905 L 53.835 34.905 Q 54.692 34.905 55.205 35.419 Q 55.719 35.933 55.719 36.789 L 55.719 53.977 Q 55.719 54.833 55.205 55.347 Q 54.692 55.861 53.835 55.861 L 9.297 55.861 Q 8.441 55.861 7.927 55.347 Q 7.413 54.833 7.413 53.977 Z" style="fill: rgb(255, 255, 255); text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 【絆出】アイコン（Bond comes into play）
#[component]
fn IconBondCip() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 60 30" style="vertical-align: middle; position: relative; top: -1px;" title="【絆出】">
            <path d="M 1.519 1.597 L 49.254 1.597 L 58.481 15 L 49.254 28.403 L 1.519 28.403 L 1.519 1.597 Z" style="stroke: rgb(255, 255, 255); stroke-width: 2; fill: rgb(28, 84, 164);"></path>
            <path style="fill: rgb(236, 114, 164); stroke: rgb(203, 0, 80); stroke-width: 1;" d="M 14.951 23.155 L 14.726 23.251 L 14.501 23.155 C 6.229 18.829 4.55 12.985 5.806 9.527 C 7.063 6.07 11.255 4.998 14.726 10.217 C 18.197 4.998 22.389 6.07 23.646 9.527 C 24.902 12.985 23.223 18.829 14.951 23.155 Z"></path>
            <path d="M 27.522 22.737 L 27.522 16.687 C 27.522 16.486 27.582 16.326 27.703 16.205 C 27.824 16.084 27.984 16.024 28.185 16.024 L 29.934 16.024 C 30.135 16.024 30.295 16.084 30.416 16.205 C 30.537 16.326 30.597 16.486 30.597 16.687 L 30.597 19.843 C 30.597 20.044 30.657 20.205 30.778 20.325 C 30.899 20.446 31.059 20.506 31.26 20.506 L 33.793 20.506 C 33.994 20.506 34.154 20.446 34.275 20.325 C 34.396 20.205 34.456 20.044 34.456 19.843 L 34.456 15.803 C 34.456 15.602 34.396 15.441 34.275 15.321 C 34.154 15.2 33.994 15.14 33.793 15.14 L 28.828 15.14 C 28.627 15.14 28.467 15.08 28.346 14.959 C 28.225 14.838 28.165 14.677 28.165 14.476 L 28.165 8.125 C 28.165 7.924 28.225 7.763 28.346 7.642 C 28.467 7.521 28.627 7.461 28.828 7.461 L 30.677 7.461 C 30.878 7.461 31.039 7.521 31.16 7.642 C 31.281 7.763 31.341 7.924 31.341 8.125 L 31.341 11.642 C 31.341 11.843 31.401 12.004 31.522 12.125 C 31.643 12.246 31.803 12.306 32.004 12.306 L 33.793 12.306 C 33.994 12.306 34.154 12.246 34.275 12.125 C 34.396 12.004 34.456 11.843 34.456 11.642 L 34.456 6.637 C 34.456 6.436 34.516 6.276 34.637 6.155 C 34.758 6.034 34.919 5.974 35.12 5.974 L 36.908 5.974 C 37.109 5.974 37.27 6.034 37.391 6.155 C 37.512 6.276 37.572 6.436 37.572 6.637 L 37.572 11.642 C 37.572 11.843 37.632 12.004 37.753 12.125 C 37.874 12.246 38.034 12.306 38.235 12.306 L 39.984 12.306 C 40.185 12.306 40.345 12.246 40.466 12.125 C 40.587 12.004 40.647 11.843 40.647 11.642 L 40.647 8.125 C 40.647 7.924 40.707 7.763 40.828 7.642 C 40.949 7.521 41.109 7.461 41.31 7.461 L 43.18 7.461 C 43.381 7.461 43.541 7.521 43.662 7.642 C 43.783 7.763 43.843 7.924 43.843 8.125 L 43.843 14.476 C 43.843 14.677 43.783 14.838 43.662 14.959 C 43.541 15.08 43.381 15.14 43.18 15.14 L 38.235 15.14 C 38.034 15.14 37.874 15.2 37.753 15.321 C 37.632 15.441 37.572 15.602 37.572 15.803 L 37.572 19.843 C 37.572 20.044 37.632 20.205 37.753 20.325 C 37.874 20.446 38.034 20.506 38.235 20.506 L 40.788 20.506 C 40.989 20.506 41.149 20.446 41.27 20.325 C 41.391 20.205 41.451 20.044 41.451 19.843 L 41.451 16.687 C 41.451 16.486 41.511 16.326 41.632 16.205 C 41.753 16.084 41.913 16.024 42.114 16.024 L 43.863 16.024 C 44.064 16.024 44.225 16.084 44.345 16.205 C 44.466 16.326 44.526 16.486 44.526 16.687 L 44.526 22.737 C 44.526 22.938 44.466 23.099 44.345 23.22 C 44.225 23.341 44.064 23.401 43.863 23.401 L 28.185 23.401 C 27.984 23.401 27.824 23.341 27.703 23.22 C 27.582 23.099 27.522 22.938 27.522 22.737 Z" style="fill: rgb(255, 255, 255); text-wrap-mode: nowrap; stroke-width: 1;"></path>
        </svg>
    }
}

/// 【絆自】アイコン（Bond Auto）
#[component]
fn IconBondAuto() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 60 30" style="vertical-align: middle; position: relative; top: -1px;" title="【絆自】">
            <path d="M 1.519 1.597 L 49.254 1.597 L 58.481 15 L 49.254 28.403 L 1.519 28.403 L 1.519 1.597 Z" style="stroke: rgb(255, 255, 255); stroke-width: 2; fill: rgb(245, 149, 32);"></path>
            <path style="fill: rgb(236, 114, 164); stroke: rgb(203, 0, 80); stroke-width: 1;" d="M 14.951 23.155 L 14.726 23.251 L 14.501 23.155 C 6.229 18.829 4.55 12.985 5.806 9.527 C 7.063 6.07 11.255 4.998 14.726 10.217 C 18.197 4.998 22.389 6.07 23.646 9.527 C 24.902 12.985 23.223 18.829 14.951 23.155 Z"></path>
            <path d="M 29.049 22.858 L 29.049 8.868 C 29.049 8.667 29.109 8.507 29.23 8.386 C 29.351 8.265 29.512 8.205 29.713 8.205 L 32.587 8.205 C 32.922 8.205 33.129 8.051 33.21 7.743 L 33.391 7.2 L 33.753 5.914 C 33.793 5.726 33.914 5.632 34.115 5.632 L 36.929 5.874 C 37.09 5.887 37.2 5.941 37.26 6.034 C 37.321 6.128 37.327 6.229 37.28 6.336 C 37.233 6.443 37.193 6.537 37.16 6.617 C 37.126 6.698 37.089 6.785 37.049 6.879 L 36.728 7.542 C 36.634 7.743 36.624 7.903 36.697 8.024 C 36.771 8.145 36.922 8.205 37.15 8.205 L 42.335 8.205 C 42.536 8.205 42.697 8.265 42.818 8.386 C 42.939 8.507 42.999 8.667 42.999 8.868 L 42.999 22.858 C 42.999 23.059 42.939 23.22 42.818 23.34 C 42.697 23.461 42.536 23.521 42.335 23.521 L 29.713 23.521 C 29.512 23.521 29.351 23.461 29.23 23.34 C 29.109 23.22 29.049 23.059 29.049 22.858 Z M 32.828 12.507 L 39.22 12.507 C 39.421 12.507 39.581 12.447 39.702 12.326 C 39.823 12.205 39.883 12.044 39.883 11.843 L 39.883 11.461 C 39.883 11.26 39.823 11.1 39.702 10.979 C 39.581 10.858 39.421 10.798 39.22 10.798 L 32.828 10.798 C 32.627 10.798 32.467 10.858 32.346 10.979 C 32.225 11.1 32.165 11.26 32.165 11.461 L 32.165 11.843 C 32.165 12.044 32.225 12.205 32.346 12.326 C 32.467 12.447 32.627 12.507 32.828 12.507 Z M 32.828 16.728 L 39.22 16.728 C 39.421 16.728 39.581 16.668 39.702 16.547 C 39.823 16.426 39.883 16.265 39.883 16.064 L 39.883 15.702 C 39.883 15.501 39.823 15.341 39.702 15.22 C 39.581 15.099 39.421 15.039 39.22 15.039 L 32.828 15.039 C 32.627 15.039 32.467 15.099 32.346 15.22 C 32.225 15.341 32.165 15.501 32.165 15.702 L 32.165 16.064 C 32.165 16.265 32.225 16.426 32.346 16.547 C 32.467 16.668 32.627 16.728 32.828 16.728 Z M 32.828 20.928 L 39.22 20.928 C 39.421 20.928 39.581 20.868 39.702 20.748 C 39.823 20.627 39.883 20.466 39.883 20.265 L 39.883 19.923 C 39.883 19.722 39.823 19.562 39.702 19.441 C 39.581 19.32 39.421 19.26 39.22 19.26 L 32.828 19.26 C 32.627 19.26 32.467 19.32 32.346 19.441 C 32.225 19.562 32.165 19.722 32.165 19.923 L 32.165 20.265 C 32.165 20.466 32.225 20.627 32.346 20.748 C 32.467 20.868 32.627 20.928 32.828 20.928 Z" style="fill: rgb(255, 255, 255); text-wrap-mode: nowrap; stroke-width: 1;"></path>
        </svg>
    }
}

/// 【絆常】アイコン（Bond Passive）
#[component]
fn IconBondPassive() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 60 30" style="vertical-align: middle; position: relative; top: -1px;" title="【絆自】">
            <path d="M 1.519 1.597 L 49.254 1.597 L 58.481 15 L 49.254 28.403 L 1.519 28.403 L 1.519 1.597 Z" style="stroke: rgb(255, 255, 255); fill: rgb(207, 33, 31); stroke-width: 2;"></path>
            <path style="fill: rgb(236, 114, 164); stroke: rgb(203, 0, 80); stroke-width: 1;" d="M 14.951 23.155 L 14.726 23.251 L 14.501 23.155 C 6.229 18.829 4.55 12.985 5.806 9.527 C 7.063 6.07 11.255 4.998 14.726 10.217 C 18.197 4.998 22.389 6.07 23.646 9.527 C 24.902 12.985 23.223 18.829 14.951 23.155 Z"></path>
            <path d="M 27.019 12.989 L 27.019 9.411 Q 27.019 9.11 27.2 8.929 Q 27.381 8.748 27.682 8.748 L 29.954 8.748 Q 30.557 8.748 30.255 8.225 L 29.914 7.703 Q 29.833 7.602 29.773 7.512 Q 29.713 7.421 29.652 7.341 Q 29.391 6.979 29.773 6.758 L 31.542 5.833 Q 31.662 5.773 31.823 5.773 Q 31.984 5.773 32.104 5.934 L 32.888 7.019 L 33.552 8.064 Q 33.672 8.346 33.411 8.487 L 33.29 8.547 Q 32.888 8.748 33.331 8.748 L 33.853 8.748 Q 34.155 8.748 34.336 8.567 Q 34.516 8.386 34.516 8.085 L 34.516 6.376 Q 34.516 6.075 34.697 5.894 Q 34.878 5.713 35.18 5.713 L 36.848 5.713 Q 37.15 5.713 37.33 5.894 Q 37.511 6.075 37.511 6.376 L 37.511 8.085 Q 37.511 8.386 37.692 8.567 Q 37.873 8.748 38.175 8.748 L 38.878 8.748 Q 39.139 8.748 38.898 8.647 L 38.697 8.547 L 38.476 8.487 Q 38.295 8.386 38.396 8.225 Q 38.496 8.064 38.597 7.904 Q 38.697 7.743 38.838 7.512 Q 38.979 7.281 39.109 7.029 Q 39.24 6.778 39.32 6.597 Q 39.501 6.235 39.562 6.075 Q 39.763 5.652 40.185 5.813 L 41.974 6.577 Q 42.175 6.657 42.245 6.828 Q 42.315 6.999 42.245 7.14 Q 42.175 7.281 42.124 7.391 Q 42.074 7.502 41.994 7.632 Q 41.913 7.763 41.843 7.904 Q 41.773 8.044 41.692 8.185 Q 41.371 8.748 42.014 8.748 L 44.406 8.748 Q 44.707 8.748 44.888 8.929 Q 45.069 9.11 45.069 9.411 L 45.069 12.989 Q 45.069 13.29 44.888 13.471 Q 44.707 13.652 44.406 13.652 L 42.918 13.652 Q 42.617 13.652 42.436 13.471 Q 42.255 13.29 42.255 12.989 L 42.255 11.743 Q 42.255 11.441 42.074 11.26 Q 41.893 11.079 41.592 11.079 L 30.517 11.079 Q 30.215 11.079 30.034 11.26 Q 29.853 11.441 29.853 11.743 L 29.853 12.989 Q 29.853 13.29 29.672 13.471 Q 29.491 13.652 29.19 13.652 L 27.682 13.652 Q 27.381 13.652 27.2 13.471 Q 27.019 13.29 27.019 12.989 Z M 34.516 23.541 L 34.516 19.823 Q 34.516 19.521 34.336 19.341 Q 34.155 19.16 33.853 19.16 L 32.707 19.16 Q 32.406 19.16 32.225 19.341 Q 32.044 19.521 32.044 19.823 L 32.044 22.637 Q 32.044 22.938 31.863 23.119 Q 31.682 23.3 31.381 23.3 L 29.773 23.3 Q 29.471 23.3 29.29 23.119 Q 29.11 22.938 29.11 22.637 L 29.11 17.552 Q 29.11 17.25 29.29 17.069 Q 29.471 16.888 29.773 16.888 L 34.215 16.888 Q 34.516 16.888 34.516 16.577 Q 34.516 16.265 34.215 16.265 L 31.481 16.265 Q 31.18 16.265 30.999 16.084 Q 30.818 15.903 30.818 15.602 L 30.818 12.326 Q 30.818 12.024 30.999 11.843 Q 31.18 11.662 31.481 11.662 L 40.546 11.662 Q 40.848 11.662 41.029 11.843 Q 41.21 12.024 41.21 12.326 L 41.21 15.602 Q 41.21 15.903 41.029 16.084 Q 40.848 16.265 40.546 16.265 L 37.833 16.265 Q 37.511 16.265 37.511 16.577 Q 37.511 16.888 37.833 16.888 L 42.456 16.888 Q 42.757 16.888 42.938 17.069 Q 43.119 17.25 43.119 17.552 L 43.119 21.129 Q 43.119 23.039 41.551 23.361 Q 41.049 23.461 40.406 23.461 L 39.3 23.461 Q 38.838 23.461 38.778 22.999 Q 38.557 21.692 38.356 21.109 Q 38.215 20.707 38.637 20.707 L 39.421 20.707 Q 39.863 20.707 40.004 20.577 Q 40.144 20.446 40.144 20.044 L 40.144 19.602 Q 40.144 19.16 39.702 19.16 L 38.175 19.16 Q 37.873 19.16 37.692 19.341 Q 37.511 19.521 37.511 19.823 L 37.511 23.541 Q 37.511 23.843 37.33 24.024 Q 37.15 24.205 36.848 24.205 L 35.18 24.205 Q 34.878 24.205 34.697 24.024 Q 34.516 23.843 34.516 23.541 Z M 33.954 14.356 L 38.094 14.356 Q 38.476 14.356 38.476 13.964 Q 38.476 13.572 38.094 13.572 L 33.954 13.572 Q 33.552 13.572 33.552 13.964 Q 33.552 14.356 33.954 14.356 Z" style="fill: rgb(255, 255, 255); text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 【絆起】アイコン（Bond Activated）
#[component]
fn IconBondActivated() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 60 30" style="vertical-align: middle; position: relative; top: -1px;" title="【絆起】">
            <path d="M 1.519 1.597 L 49.254 1.597 L 58.481 15 L 49.254 28.403 L 1.519 28.403 L 1.519 1.597 Z" style="stroke: rgb(255, 255, 255); stroke-width: 2; fill: rgb(30, 143, 66);"></path>
            <path style="fill: rgb(236, 114, 164); stroke: rgb(203, 0, 80); stroke-width: 1;" d="M 14.951 23.155 L 14.726 23.251 L 14.501 23.155 C 6.229 18.829 4.55 12.985 5.806 9.527 C 7.063 6.07 11.255 4.998 14.726 10.217 C 18.197 4.998 22.389 6.07 23.646 9.527 C 24.902 12.985 23.223 18.829 14.951 23.155 Z"></path>
            <path d="M 37.612 23.863 Q 35.461 23.863 34.195 23.511 Q 32.929 23.16 32.084 22.737 Q 31.24 22.315 30.697 21.833 Q 30.155 21.351 29.853 21.351 Q 29.471 21.351 29.24 21.994 Q 29.009 22.637 28.748 23.18 Q 28.587 23.521 28.336 23.521 Q 28.084 23.521 27.904 23.441 Q 27.019 23.019 26.657 22.918 Q 26.095 22.697 26.396 22.084 Q 26.698 21.471 26.909 20.738 Q 27.12 20.004 27.24 19.26 Q 27.441 17.954 27.542 16.205 Q 27.542 15.863 27.733 15.672 Q 27.924 15.481 28.265 15.522 L 29.632 15.662 Q 30.135 15.702 30.135 16.205 L 30.074 17.511 Q 30.054 17.692 30.155 17.873 L 30.557 18.537 Q 30.738 18.778 30.738 18.496 L 30.738 14.858 Q 30.738 14.557 30.557 14.376 Q 30.376 14.195 30.074 14.195 L 27.723 14.195 Q 27.421 14.195 27.24 14.014 Q 27.059 13.833 27.059 13.532 L 27.059 12.466 Q 27.059 12.165 27.24 11.984 Q 27.421 11.803 27.723 11.803 L 29.974 11.803 Q 30.275 11.803 30.456 11.622 Q 30.637 11.441 30.637 11.14 L 30.637 10.919 Q 30.637 10.617 30.456 10.436 Q 30.275 10.255 29.974 10.255 L 28.326 10.255 Q 28.024 10.255 27.843 10.074 Q 27.662 9.894 27.662 9.592 L 27.662 8.587 Q 27.662 8.286 27.843 8.105 Q 28.024 7.924 28.326 7.924 L 29.974 7.924 Q 30.275 7.924 30.456 7.743 Q 30.637 7.562 30.637 7.26 L 30.637 6.477 Q 30.637 6.175 30.818 5.994 Q 30.999 5.813 31.3 5.813 L 32.768 5.813 Q 33.069 5.813 33.25 5.994 Q 33.431 6.175 33.431 6.477 L 33.431 7.26 Q 33.431 7.562 33.612 7.743 Q 33.793 7.924 34.094 7.924 L 34.979 7.924 Q 35.28 7.924 35.461 8.105 Q 35.642 8.286 35.642 8.587 L 35.642 9.592 Q 35.642 9.894 35.461 10.074 Q 35.28 10.255 34.979 10.255 L 34.094 10.255 Q 33.793 10.255 33.612 10.436 Q 33.431 10.617 33.431 10.919 L 33.431 11.14 Q 33.431 11.441 33.612 11.622 Q 33.793 11.803 34.094 11.803 L 35.361 11.803 Q 35.662 11.803 35.843 11.984 Q 36.024 12.165 36.024 12.466 L 36.024 13.532 Q 36.024 13.833 35.843 14.014 Q 35.662 14.195 35.361 14.195 L 34.094 14.195 Q 33.793 14.195 33.612 14.376 Q 33.431 14.557 33.431 14.858 L 33.431 15.039 Q 33.431 15.341 33.612 15.522 Q 33.793 15.702 34.094 15.702 L 35.22 15.702 Q 35.521 15.702 35.702 15.883 Q 35.883 16.064 35.883 16.366 L 35.883 17.612 Q 35.883 17.913 35.702 18.094 Q 35.521 18.275 35.22 18.275 L 34.094 18.275 Q 33.793 18.275 33.612 18.456 Q 33.431 18.637 33.431 18.939 L 33.431 20.265 Q 33.431 20.727 33.873 20.868 Q 35.421 21.27 37.19 21.27 Q 42.818 21.27 44.908 20.949 Q 45.33 20.908 45.21 21.31 Q 44.868 22.396 44.828 22.818 Q 44.788 23.24 44.767 23.361 Q 44.707 23.863 44.225 23.863 Z M 38.918 20.265 Q 37.873 20.265 37.491 20.064 Q 36.727 19.642 36.727 18.717 L 36.727 12.306 Q 36.727 12.004 36.908 11.823 Q 37.089 11.642 37.391 11.642 L 40.808 11.642 Q 41.109 11.642 41.29 11.461 Q 41.471 11.28 41.471 10.979 L 41.471 9.914 Q 41.471 9.612 41.29 9.431 Q 41.109 9.25 40.808 9.25 L 37.31 9.25 Q 37.009 9.25 36.828 9.069 Q 36.647 8.889 36.647 8.587 L 36.647 7.421 Q 36.647 7.12 36.828 6.939 Q 37.009 6.758 37.31 6.758 L 43.662 6.758 Q 43.963 6.758 44.144 6.939 Q 44.325 7.12 44.325 7.421 L 44.325 13.471 Q 44.325 13.773 44.144 13.954 Q 43.963 14.135 43.662 14.135 L 40.185 14.135 Q 39.883 14.135 39.702 14.316 Q 39.521 14.496 39.521 14.798 L 39.521 17.049 Q 39.521 17.331 39.662 17.421 Q 39.803 17.511 40.165 17.511 L 41.531 17.511 Q 42.195 17.511 42.396 17.15 Q 42.556 16.908 42.657 16.145 Q 42.697 15.723 43.099 15.883 Q 43.3 15.964 43.521 16.054 Q 43.742 16.145 43.984 16.215 Q 44.225 16.285 44.486 16.366 L 44.928 16.466 Q 45.37 16.607 45.29 17.029 Q 45.029 18.778 44.506 19.421 Q 43.823 20.265 42.275 20.265 Z" style="fill: rgb(255, 255, 255); text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 【自】アイコン（Auto）
#[component]
fn IconAuto() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 70 64" style="vertical-align: middle; position: relative; top: -1px;" title="【常】">
          <path d="M 0.622 64 L 0.622 0 L 58.6 0 L 69.846 32 L 58.6 64 L 0.622 64 Z" style="fill: white; stroke-width: 1.074;"></path>
          <rect width="69.705" height="64" style="fill: none; stroke-width: 0.974;"></rect>
          <path d="M 3.017 61.786 L 3.017 2.214 L 56.983 2.214 L 67.451 32 L 56.983 61.786 L 3.017 61.786 Z" style="stroke-width: 1; fill: rgb(255, 0, 0);"></path>
          <path d="M 9.483 26.873 L 9.483 17.759 Q 9.483 16.991 9.944 16.531 Q 10.405 16.07 11.173 16.07 L 16.959 16.07 Q 18.495 16.07 17.727 14.739 L 16.856 13.407 Q 16.651 13.151 16.498 12.921 Q 16.344 12.691 16.191 12.486 Q 15.525 11.564 16.498 11.001 L 21.003 8.646 Q 21.311 8.492 21.72 8.492 Q 22.13 8.492 22.437 8.902 L 24.434 11.667 L 26.123 14.329 Q 26.431 15.046 25.765 15.404 L 25.458 15.558 Q 24.434 16.07 25.56 16.07 L 26.891 16.07 Q 27.659 16.07 28.12 15.609 Q 28.581 15.148 28.581 14.38 L 28.581 10.028 Q 28.581 9.26 29.042 8.799 Q 29.503 8.339 30.271 8.339 L 34.52 8.339 Q 35.288 8.339 35.749 8.799 Q 36.21 9.26 36.21 10.028 L 36.21 14.38 Q 36.21 15.148 36.671 15.609 Q 37.131 16.07 37.899 16.07 L 39.691 16.07 Q 40.357 16.07 39.743 15.814 L 39.231 15.558 L 38.667 15.404 Q 38.207 15.148 38.463 14.739 Q 38.719 14.329 38.975 13.919 Q 39.231 13.51 39.589 12.921 Q 39.947 12.332 40.28 11.692 Q 40.613 11.052 40.818 10.591 Q 41.279 9.67 41.432 9.26 Q 41.944 8.185 43.019 8.595 L 47.576 10.54 Q 48.088 10.745 48.267 11.18 Q 48.447 11.615 48.267 11.974 Q 48.088 12.332 47.96 12.614 Q 47.832 12.895 47.627 13.228 Q 47.423 13.561 47.243 13.919 Q 47.064 14.278 46.859 14.636 Q 46.04 16.07 47.679 16.07 L 53.771 16.07 Q 54.539 16.07 55 16.531 Q 55.461 16.991 55.461 17.759 L 55.461 26.873 Q 55.461 27.641 55 28.102 Q 54.539 28.563 53.771 28.563 L 49.983 28.563 Q 49.215 28.563 48.754 28.102 Q 48.293 27.641 48.293 26.873 L 48.293 23.699 Q 48.293 22.931 47.832 22.47 Q 47.371 22.009 46.603 22.009 L 18.392 22.009 Q 17.624 22.009 17.163 22.47 Q 16.703 22.931 16.703 23.699 L 16.703 26.873 Q 16.703 27.641 16.242 28.102 Q 15.781 28.563 15.013 28.563 L 11.173 28.563 Q 10.405 28.563 9.944 28.102 Q 9.483 27.641 9.483 26.873 Z M 28.581 53.753 L 28.581 44.281 Q 28.581 43.513 28.12 43.052 Q 27.659 42.591 26.891 42.591 L 23.973 42.591 Q 23.205 42.591 22.744 43.052 Q 22.283 43.513 22.283 44.281 L 22.283 51.449 Q 22.283 52.217 21.823 52.678 Q 21.362 53.139 20.594 53.139 L 16.498 53.139 Q 15.73 53.139 15.269 52.678 Q 14.808 52.217 14.808 51.449 L 14.808 38.495 Q 14.808 37.727 15.269 37.267 Q 15.73 36.806 16.498 36.806 L 27.813 36.806 Q 28.581 36.806 28.581 36.012 Q 28.581 35.219 27.813 35.219 L 20.85 35.219 Q 20.082 35.219 19.621 34.758 Q 19.16 34.297 19.16 33.529 L 19.16 25.183 Q 19.16 24.415 19.621 23.955 Q 20.082 23.494 20.85 23.494 L 43.941 23.494 Q 44.709 23.494 45.17 23.955 Q 45.631 24.415 45.631 25.183 L 45.631 33.529 Q 45.631 34.297 45.17 34.758 Q 44.709 35.219 43.941 35.219 L 37.029 35.219 Q 36.21 35.219 36.21 36.012 Q 36.21 36.806 37.029 36.806 L 48.805 36.806 Q 49.573 36.806 50.034 37.267 Q 50.495 37.727 50.495 38.495 L 50.495 47.609 Q 50.495 52.473 46.501 53.292 Q 45.221 53.548 43.583 53.548 L 40.767 53.548 Q 39.589 53.548 39.435 52.371 Q 38.872 49.043 38.36 47.558 Q 38.002 46.534 39.077 46.534 L 41.074 46.534 Q 42.2 46.534 42.559 46.201 Q 42.917 45.868 42.917 44.844 L 42.917 43.718 Q 42.917 42.591 41.791 42.591 L 37.899 42.591 Q 37.131 42.591 36.671 43.052 Q 36.21 43.513 36.21 44.281 L 36.21 53.753 Q 36.21 54.521 35.749 54.982 Q 35.288 55.443 34.52 55.443 L 30.271 55.443 Q 29.503 55.443 29.042 54.982 Q 28.581 54.521 28.581 53.753 Z M 27.147 30.355 L 37.695 30.355 Q 38.667 30.355 38.667 29.356 Q 38.667 28.358 37.695 28.358 L 27.147 28.358 Q 26.123 28.358 26.123 29.356 Q 26.123 30.355 27.147 30.355 Z" style="fill: rgb(255, 255, 255); text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 【起】アイコン（Activated）
#[component]
fn IconActivated() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 74 64" style="vertical-align: middle; position: relative; top: -1px;" title="【起】">
            <path d="M 0.622 64 L 0.622 0 L 58.6 0 L 69.846 32 L 58.6 64 L 0.622 64 Z" style="fill: white; stroke-width: 1.074;"></path>
            <rect width="69.705" height="64" style="fill: none; stroke-width: 0.974;"></rect>
            <path d="M 3.017 61.786 L 3.017 2.214 L 56.983 2.214 L 67.451 32 L 56.983 61.786 L 3.017 61.786 Z" style="stroke-width: 1; fill: rgb(0, 142, 33);"></path>
            <path d="M 36.068 54.341 Q 30.579 54.341 27.347 53.444 Q 24.115 52.546 21.96 51.469 Q 19.806 50.391 18.42 49.16 Q 17.035 47.929 16.266 47.929 Q 15.291 47.929 14.701 49.57 Q 14.111 51.212 13.444 52.597 Q 13.034 53.469 12.393 53.469 Q 11.751 53.469 11.29 53.264 Q 9.033 52.187 8.109 51.93 Q 6.673 51.366 7.442 49.801 Q 8.212 48.237 8.75 46.364 Q 9.289 44.492 9.597 42.594 Q 10.11 39.259 10.366 34.796 Q 10.366 33.924 10.854 33.437 Q 11.341 32.949 12.213 33.052 L 15.702 33.411 Q 16.984 33.514 16.984 34.796 L 16.83 38.131 Q 16.779 38.592 17.035 39.054 L 18.061 40.747 Q 18.523 41.362 18.523 40.644 L 18.523 31.359 Q 18.523 30.589 18.061 30.128 Q 17.6 29.666 16.83 29.666 L 10.828 29.666 Q 10.059 29.666 9.597 29.204 Q 9.135 28.743 9.135 27.973 L 9.135 25.254 Q 9.135 24.485 9.597 24.023 Q 10.059 23.561 10.828 23.561 L 16.574 23.561 Q 17.343 23.561 17.805 23.1 Q 18.267 22.638 18.267 21.868 L 18.267 21.304 Q 18.267 20.535 17.805 20.073 Q 17.343 19.611 16.574 19.611 L 12.367 19.611 Q 11.598 19.611 11.136 19.15 Q 10.674 18.688 10.674 17.918 L 10.674 15.353 Q 10.674 14.584 11.136 14.122 Q 11.598 13.66 12.367 13.66 L 16.574 13.66 Q 17.343 13.66 17.805 13.199 Q 18.267 12.737 18.267 11.968 L 18.267 9.967 Q 18.267 9.197 18.728 8.736 Q 19.19 8.274 19.959 8.274 L 23.704 8.274 Q 24.474 8.274 24.936 8.736 Q 25.397 9.197 25.397 9.967 L 25.397 11.968 Q 25.397 12.737 25.859 13.199 Q 26.321 13.66 27.09 13.66 L 29.347 13.66 Q 30.117 13.66 30.579 14.122 Q 31.04 14.584 31.04 15.353 L 31.04 17.918 Q 31.04 18.688 30.579 19.15 Q 30.117 19.611 29.347 19.611 L 27.09 19.611 Q 26.321 19.611 25.859 20.073 Q 25.397 20.535 25.397 21.304 L 25.397 21.868 Q 25.397 22.638 25.859 23.1 Q 26.321 23.561 27.09 23.561 L 30.322 23.561 Q 31.092 23.561 31.553 24.023 Q 32.015 24.485 32.015 25.254 L 32.015 27.973 Q 32.015 28.743 31.553 29.204 Q 31.092 29.666 30.322 29.666 L 27.09 29.666 Q 26.321 29.666 25.859 30.128 Q 25.397 30.589 25.397 31.359 L 25.397 31.821 Q 25.397 32.59 25.859 33.052 Q 26.321 33.514 27.09 33.514 L 29.963 33.514 Q 30.732 33.514 31.194 33.975 Q 31.656 34.437 31.656 35.206 L 31.656 38.387 Q 31.656 39.157 31.194 39.618 Q 30.732 40.08 29.963 40.08 L 27.09 40.08 Q 26.321 40.08 25.859 40.542 Q 25.397 41.003 25.397 41.773 L 25.397 45.159 Q 25.397 46.339 26.526 46.698 Q 30.476 47.724 34.99 47.724 Q 49.354 47.724 54.69 46.903 Q 55.767 46.8 55.459 47.826 Q 54.587 50.596 54.484 51.674 Q 54.382 52.751 54.331 53.059 Q 54.177 54.341 52.945 54.341 Z M 39.402 45.159 Q 36.735 45.159 35.76 44.646 Q 33.81 43.568 33.81 41.209 L 33.81 24.844 Q 33.81 24.074 34.272 23.613 Q 34.734 23.151 35.503 23.151 L 44.224 23.151 Q 44.994 23.151 45.456 22.689 Q 45.917 22.228 45.917 21.458 L 45.917 18.739 Q 45.917 17.97 45.456 17.508 Q 44.994 17.046 44.224 17.046 L 35.298 17.046 Q 34.529 17.046 34.067 16.585 Q 33.605 16.123 33.605 15.353 L 33.605 12.378 Q 33.605 11.608 34.067 11.147 Q 34.529 10.685 35.298 10.685 L 51.509 10.685 Q 52.279 10.685 52.74 11.147 Q 53.202 11.608 53.202 12.378 L 53.202 27.819 Q 53.202 28.589 52.74 29.05 Q 52.279 29.512 51.509 29.512 L 42.634 29.512 Q 41.865 29.512 41.403 29.974 Q 40.941 30.436 40.941 31.205 L 40.941 36.951 Q 40.941 37.669 41.3 37.9 Q 41.659 38.131 42.583 38.131 L 46.071 38.131 Q 47.764 38.131 48.277 37.207 Q 48.688 36.592 48.944 34.642 Q 49.047 33.565 50.073 33.975 Q 50.586 34.18 51.15 34.411 Q 51.714 34.642 52.33 34.822 Q 52.945 35.001 53.612 35.206 L 54.741 35.463 Q 55.87 35.822 55.664 36.899 Q 54.997 41.362 53.664 43.004 Q 51.919 45.159 47.969 45.159 Z" style="fill: rgb(255, 255, 255); text-wrap-mode: nowrap;"></path>
        </svg>        
    }
}

/// 【常】アイコン（Passive）
#[component]
fn IconPassive() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 24 24" style="vertical-align: middle; position: relative; top: -1px;" title="【自】">
            <path d="M 0.399 23.986 L 0.399 -0.036 L 19.831 -0.036 L 23.6 11.975 L 19.831 23.986 L 0.399 23.986 Z" style="fill: white; stroke-width: 1.074;"></path>
            <rect x="0.319" y="-0.036" width="23.362" height="24.072" style="fill: none; stroke-width: 0.974;"></rect>
            <path d="M 1.33 23.203 L 1.33 0.797 L 19.416 0.797 L 22.926 12 L 19.416 23.203 L 1.33 23.203 Z" style="stroke-width: 1; fill: color(srgb 100% 67.5% 0%);"></path>
            <path d="M 3.897 19.979 L 3.897 5.294 Q 3.897 4.977 4.087 4.787 Q 4.277 4.597 4.594 4.597 L 7.611 4.597 Q 8.138 4.597 8.265 4.112 L 8.455 3.542 L 8.835 2.192 Q 8.898 1.896 9.214 1.896 L 12.168 2.15 Q 12.422 2.171 12.517 2.318 Q 12.612 2.466 12.538 2.635 Q 12.464 2.804 12.411 2.93 Q 12.358 3.057 12.295 3.205 L 11.957 3.901 Q 11.81 4.217 11.926 4.407 Q 12.042 4.597 12.401 4.597 L 17.844 4.597 Q 18.161 4.597 18.351 4.787 Q 18.541 4.977 18.541 5.294 L 18.541 19.979 Q 18.541 20.296 18.351 20.485 Q 18.161 20.675 17.844 20.675 L 4.594 20.675 Q 4.277 20.675 4.087 20.485 Q 3.897 20.296 3.897 19.979 Z M 7.864 9.113 L 14.574 9.113 Q 14.89 9.113 15.08 8.923 Q 15.27 8.733 15.27 8.416 L 15.27 8.015 Q 15.27 7.699 15.08 7.509 Q 14.89 7.319 14.574 7.319 L 7.864 7.319 Q 7.548 7.319 7.358 7.509 Q 7.168 7.699 7.168 8.015 L 7.168 8.416 Q 7.168 8.733 7.358 8.923 Q 7.548 9.113 7.864 9.113 Z M 7.864 13.544 L 14.574 13.544 Q 14.89 13.544 15.08 13.354 Q 15.27 13.164 15.27 12.847 L 15.27 12.467 Q 15.27 12.151 15.08 11.961 Q 14.89 11.771 14.574 11.771 L 7.864 11.771 Q 7.548 11.771 7.358 11.961 Q 7.168 12.151 7.168 12.467 L 7.168 12.847 Q 7.168 13.164 7.358 13.354 Q 7.548 13.544 7.864 13.544 Z M 7.864 17.953 L 14.574 17.953 Q 14.89 17.953 15.08 17.764 Q 15.27 17.574 15.27 17.257 L 15.27 16.898 Q 15.27 16.582 15.08 16.392 Q 14.89 16.202 14.574 16.202 L 7.864 16.202 Q 7.548 16.202 7.358 16.392 Q 7.168 16.582 7.168 16.898 L 7.168 17.257 Q 7.168 17.574 7.358 17.764 Q 7.548 17.953 7.864 17.953 Z" style="fill: rgb(255, 255, 255); text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 【リコレクト】アイコン
#[component]
fn IconRecollect() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 118 24" style="vertical-align: middle; position: relative; top: -1px;" title="【リコレクト】">
            <rect x="0" y="0" width="110" height="24" style="stroke: rgb(0, 0, 0); stroke-width: 2px; fill: rgb(255, 255, 255);"></rect>
            <path d="M 4.281 21.076 L 4.281 15.398 L 9.176 12 L 4.281 8.602 L 4.281 2.924 L 15.456 2.924 L 15.456 8.602 L 10.562 12 L 15.456 15.398 L 15.456 21.076 L 4.281 21.076 Z" style="stroke: rgb(0, 0, 0); fill: rgb(255, 255, 255);"></path>
            <path d="M 27.105 2.272 Q 27.105 1.88 27.366 1.698 Q 27.549 1.567 27.862 1.567 L 30.289 1.567 Q 30.759 1.567 31.033 1.854 Q 31.307 2.141 31.307 2.585 L 31.307 9.006 Q 31.307 13.86 29.428 16.992 Q 27.471 20.202 23.321 22.238 Q 23.112 22.343 22.812 22.343 Q 22.512 22.343 22.303 22.029 Q 22.146 21.821 22.068 21.703 Q 21.99 21.586 21.859 21.39 Q 21.729 21.194 21.533 20.92 Q 21.337 20.646 21.168 20.463 Q 20.998 20.281 20.893 20.163 Q 20.789 20.046 20.685 19.941 Q 20.424 19.68 20.424 19.419 Q 20.424 19.054 20.893 18.845 Q 24.339 17.358 25.8 15.009 Q 27.236 12.764 27.236 9.006 L 27.236 6.187 L 27.131 2.924 Z M 19.902 13.416 L 19.902 11.85 Q 19.902 11.746 19.745 5.639 Q 19.641 2.898 19.641 2.898 Q 19.641 2.585 19.836 2.376 Q 20.032 2.167 20.398 2.167 L 22.825 2.167 Q 23.164 2.167 23.373 2.324 Q 23.66 2.533 23.66 2.976 L 23.66 4.542 Q 23.66 4.803 23.817 10.519 Q 23.869 11.746 23.895 12.268 Q 23.921 12.79 23.921 12.947 Q 23.921 13.103 23.934 13.208 Q 23.947 13.312 23.947 13.364 Q 23.947 13.782 23.66 13.991 Q 23.451 14.173 23.086 14.173 L 20.685 14.199 Q 20.345 14.199 20.124 13.978 Q 19.902 13.756 19.902 13.416 Z M 35.167 6.891 Q 35.167 6.422 35.441 6.174 Q 35.715 5.926 36.159 5.926 L 37.385 5.952 Q 39.03 6.004 40.517 6.004 Q 42.083 6.004 46.129 5.952 Q 47.46 5.9 48.726 5.874 Q 49.992 5.847 50.018 5.847 Q 50.461 5.847 50.722 6.122 Q 50.983 6.396 50.983 6.865 L 50.983 17.279 Q 50.983 17.749 50.709 18.023 Q 50.435 18.297 49.731 18.297 L 48.165 18.297 Q 47.225 18.297 46.181 18.323 Q 45.137 18.349 44.067 18.362 Q 42.997 18.375 41.77 18.402 Q 40.543 18.428 39.134 18.48 Q 36.524 18.584 36.185 18.584 Q 35.845 18.584 35.558 18.336 Q 35.271 18.088 35.245 17.645 Q 35.141 15.531 35.141 15.478 Q 35.141 15.035 35.402 14.761 Q 35.663 14.487 36.106 14.487 Q 36.159 14.487 36.498 14.487 Q 37.959 14.487 40.517 14.513 L 42.162 14.513 Q 42.657 14.513 46.311 14.434 Q 46.546 14.434 46.69 14.304 Q 46.833 14.173 46.833 13.938 L 46.833 10.284 Q 46.833 10.023 46.69 9.88 Q 46.546 9.736 46.285 9.736 L 44.876 9.736 L 42.292 9.762 Q 41.613 9.789 40.804 9.789 Q 39.839 9.789 38.051 9.88 Q 36.263 9.971 36.211 9.971 Q 35.819 9.971 35.545 9.71 Q 35.271 9.449 35.245 9.006 Q 35.245 9.006 35.206 7.962 Q 35.167 6.918 35.167 6.891 Z M 53.747 10.467 Q 53.747 7.361 53.616 5.143 Q 53.616 5.091 53.616 5.038 Q 53.616 4.621 53.89 4.347 Q 54.164 4.073 54.66 4.073 L 56.67 4.073 Q 57.192 4.073 57.453 4.36 Q 57.714 4.647 57.714 5.091 L 57.688 6.552 Q 57.635 8.17 57.635 10.284 L 57.635 14.095 Q 57.635 14.382 57.753 14.513 Q 57.87 14.643 58.027 14.643 Q 58.184 14.643 58.366 14.591 Q 63.847 12.164 66.849 10.154 Q 68.154 9.293 69.302 8.301 Q 69.563 8.118 69.785 8.118 Q 70.007 8.118 70.137 8.275 Q 70.216 8.405 70.242 8.627 Q 70.268 8.849 70.268 9.006 Q 70.268 9.162 70.32 9.475 Q 70.424 10.311 70.555 10.859 L 70.555 10.885 Q 70.633 11.355 70.685 11.589 Q 70.738 11.824 70.738 11.929 Q 70.738 12.346 70.346 12.633 Q 65.883 15.974 58.862 18.897 Q 57.479 19.498 56.2 19.889 Q 56.017 19.941 55.887 19.941 Q 55.547 19.941 55.286 19.733 L 54.086 18.819 Q 53.616 18.506 53.616 18.01 Q 53.616 17.958 53.642 17.697 Q 53.72 17.044 53.72 16 Q 53.72 14.956 53.747 14.147 Z M 82.114 9.006 Q 82.114 8.849 81.853 8.849 L 77.938 9.058 Q 77.703 9.058 77.546 9.24 Q 75.51 11.746 72.979 13.625 Q 72.77 13.808 72.444 13.808 Q 72.117 13.808 71.935 13.599 Q 71.909 13.547 71.856 13.495 Q 71.804 13.469 71.778 13.443 L 71.595 13.234 Q 70.63 12.268 70.134 11.903 Q 69.768 11.642 69.768 11.355 Q 69.768 11.067 70.108 10.859 Q 72.222 9.501 74.153 7.205 Q 76.059 4.882 77.05 2.585 Q 77.337 1.932 77.912 1.932 Q 78.12 1.932 78.329 2.011 L 80.339 2.742 Q 80.73 2.872 80.861 3.185 Q 80.913 3.342 80.913 3.498 Q 80.913 3.733 80.744 4.099 Q 80.574 4.464 80.404 4.803 Q 80.235 5.143 80.235 5.247 Q 80.261 5.273 80.313 5.273 Q 80.313 5.273 80.417 5.273 Q 83.21 5.273 84.933 4.986 L 84.959 4.986 Q 85.324 4.986 85.559 5.117 L 86.994 5.9 Q 87.543 6.213 87.543 6.735 Q 87.543 6.891 87.49 7.074 Q 85.768 11.981 81.905 15.974 Q 78.538 19.419 73.292 22.029 Q 73.109 22.108 72.796 22.108 Q 72.405 22.108 72.117 21.638 Q 71.726 20.959 70.604 19.576 Q 70.369 19.341 70.369 19.08 Q 70.369 18.715 70.812 18.558 Q 76.137 16.47 79.843 12.294 Q 81.096 10.911 82.009 9.319 Q 82.114 9.11 82.114 9.006 Z M 93.673 21.038 L 93.673 3.316 Q 93.673 2.872 93.947 2.585 Q 94.221 2.298 94.691 2.298 L 96.674 2.298 Q 97.118 2.298 97.405 2.585 Q 97.692 2.872 97.692 3.316 L 97.692 8.718 Q 97.692 8.823 97.692 8.901 Q 97.718 8.875 97.953 8.562 Q 98.266 8.118 98.658 8.118 Q 99.049 8.118 99.284 8.275 Q 99.519 8.431 99.741 8.575 Q 99.963 8.718 100.38 9.006 Q 101.529 9.736 102.755 10.493 Q 104.06 11.276 105.418 11.877 Q 105.835 12.085 105.835 12.451 Q 105.835 12.686 105.653 12.921 Q 105.522 13.103 105.17 13.547 Q 104.817 13.991 104.165 15.113 Q 103.904 15.557 103.512 15.557 Q 103.199 15.557 103.016 15.426 Q 102.834 15.296 102.638 15.191 Q 102.442 15.087 102.155 14.904 Q 100.38 13.808 98.057 12.216 Q 97.901 12.085 97.823 12.085 Q 97.744 12.085 97.718 12.151 Q 97.692 12.216 97.692 12.399 L 97.692 21.038 Q 97.692 21.481 97.405 21.768 Q 97.118 22.056 96.674 22.056 L 94.691 22.056 Q 94.221 22.056 93.947 21.768 Q 93.673 21.481 93.673 21.038 Z" style="fill: rgb(51, 51, 51); text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 《ターン1》アイコン
#[component]
fn IconOnceTurn() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 50 24" style="vertical-align: middle; position: relative; top: -1px;" title="《ターン1回》">
            <path d="M 8.115 3.181 H 41.886 A 4.087 4.087 0 0 1 45.973 7.268 V 16.732 A 4.087 4.087 0 0 1 41.886 20.819 H 8.115 A 4.087 4.087 0 0 1 4.028 16.732 V 7.268 A 4.087 4.087 0 0 1 8.115 3.181 Z" style="stroke: rgb(0, 0, 0); fill: rgb(255, 255, 255);"></path>
            <path d="M 11.208 11.077 Q 11.208 11.019 11.093 11.019 Q 11.082 11.019 11.059 11.019 Q 11.059 11.019 10.553 11.042 L 9.702 11.088 L 9.23 11.111 Q 9.092 11.134 9.046 11.215 Q 8.23 12.388 7.16 13.319 Q 7.011 13.423 6.85 13.423 Q 6.689 13.423 6.562 13.285 Q 6.16 12.848 5.941 12.687 L 5.941 12.687 Q 5.769 12.537 5.769 12.376 Q 5.769 12.215 5.941 12.077 Q 6.769 11.399 7.522 10.37 Q 8.276 9.34 8.644 8.305 Q 8.701 8.121 8.862 8.041 Q 8.943 7.995 9.035 7.995 Q 9.127 7.995 9.207 8.029 L 10.047 8.294 Q 10.219 8.351 10.288 8.501 Q 10.323 8.57 10.323 8.65 Q 10.323 8.731 10.3 8.823 Q 10.173 9.168 10.047 9.409 Q 10.024 9.513 10.035 9.536 Q 10.058 9.57 10.139 9.559 Q 10.921 9.524 11.191 9.519 Q 11.461 9.513 11.657 9.496 Q 11.852 9.478 11.99 9.473 Q 12.128 9.467 12.186 9.461 Q 12.243 9.455 12.289 9.455 Q 12.404 9.455 12.496 9.501 L 13.152 9.846 Q 13.405 9.973 13.405 10.203 Q 13.405 10.283 13.37 10.375 Q 12.922 11.721 12.243 12.813 Q 12.186 12.905 12.186 12.98 Q 12.186 13.055 12.278 13.135 Q 12.726 13.492 13.129 13.883 Q 13.232 13.998 13.232 14.13 Q 13.232 14.262 13.094 14.4 Q 13.037 14.446 12.991 14.492 Q 12.841 14.619 12.715 14.774 Q 12.588 14.929 12.513 15.01 Q 12.439 15.09 12.398 15.148 Q 12.358 15.205 12.301 15.286 Q 12.209 15.401 12.076 15.401 Q 11.944 15.401 11.841 15.263 Q 11.668 15.079 11.455 14.883 Q 11.243 14.688 11.162 14.607 Q 11.082 14.527 10.99 14.527 Q 10.898 14.527 10.817 14.607 Q 9.299 16.16 7.057 17.114 Q 6.965 17.16 6.873 17.16 Q 6.631 17.16 6.482 16.907 L 6.482 16.896 Q 6.298 16.493 6.022 16.137 Q 5.907 15.999 5.907 15.884 Q 5.907 15.677 6.16 15.585 Q 8.011 14.849 9.449 13.469 Q 9.518 13.411 9.518 13.354 Q 9.483 13.25 9.173 13.101 L 8.908 12.951 Q 8.701 12.848 8.701 12.675 Q 8.701 12.56 8.793 12.445 L 9.357 11.721 Q 9.495 11.548 9.69 11.548 Q 9.782 11.548 9.874 11.583 L 10.024 11.652 L 10.196 11.744 Q 10.242 11.778 10.334 11.813 L 10.495 11.905 Q 10.553 11.939 10.639 11.939 Q 10.725 11.939 10.771 11.87 Q 10.84 11.755 10.898 11.663 Q 11.001 11.514 11.185 11.134 Q 11.208 11.1 11.208 11.077 Z M 25.579 13.147 Q 25.579 13.285 25.522 13.365 Q 25.441 13.48 25.269 13.48 L 24.74 13.457 Q 23.751 13.423 22.129 13.423 L 20.588 13.423 Q 18.035 13.423 17.23 13.492 Q 17.207 13.492 17.196 13.492 Q 17.035 13.492 16.954 13.377 Q 16.897 13.296 16.897 13.17 L 16.897 12.917 L 16.885 12.319 L 16.885 12.077 Q 16.885 12.054 16.885 12.043 Q 16.885 11.905 16.966 11.819 Q 17.046 11.732 17.184 11.732 L 17.61 11.744 Q 18.093 11.767 18.806 11.767 L 20.335 11.778 L 20.749 11.778 L 21.566 11.79 L 21.98 11.79 Q 23.728 11.79 24.774 11.755 L 25.28 11.744 Q 25.407 11.744 25.493 11.824 Q 25.579 11.905 25.579 12.043 Q 25.579 12.054 25.579 12.077 Z M 31.164 11.663 Q 31.061 11.778 30.911 11.778 Q 30.762 11.778 30.532 11.583 Q 30.049 11.157 29.623 10.893 Q 29.324 10.697 29.083 10.559 Q 28.887 10.433 28.887 10.272 Q 28.887 10.157 28.979 10.03 L 29.646 9.191 Q 29.773 9.018 29.934 9.018 Q 30.106 9.018 30.336 9.168 Q 30.957 9.547 31.36 9.841 Q 31.762 10.134 31.854 10.226 Q 32.004 10.341 32.004 10.508 Q 32.004 10.674 31.889 10.812 Z M 29.198 15.205 Q 29.117 15.056 29.117 14.952 Q 29.117 14.63 29.485 14.527 Q 31.107 14.101 33.004 12.848 Q 35.178 11.422 35.96 10.26 Q 36.052 10.122 36.167 10.122 Q 36.305 10.122 36.385 10.318 L 36.477 10.594 Q 36.65 11.088 36.776 11.33 Q 36.903 11.571 36.903 11.698 Q 36.903 11.847 36.799 11.962 Q 35.695 13.331 33.821 14.55 Q 32.061 15.688 30.233 16.321 Q 30.152 16.355 30.072 16.355 Q 29.842 16.355 29.715 16.125 Z" transform="matrix(0.837012, 0, 0, 1, 2.871699, 0)" style="paint-order: stroke; stroke: rgb(255, 255, 255); text-wrap-mode: nowrap;"></path>
            <path d="M 38.47 20.412 L 38.47 7.882 Q 38.47 6.833 37.808 6.833 Q 37.532 6.833 37.062 7.137 L 36.014 7.827 Q 35.738 8.02 35.393 8.02 Q 35.048 8.02 34.744 7.551 L 33.971 6.309 Q 33.502 5.536 34.275 5.067 L 39.022 2.113 Q 39.243 1.975 39.491 1.975 L 40.844 1.975 Q 41.258 1.975 41.506 2.224 Q 41.754 2.472 41.754 2.886 L 41.754 20.412 Q 41.754 20.826 41.506 21.075 Q 41.258 21.323 40.844 21.323 L 39.381 21.323 Q 38.967 21.323 38.718 21.075 Q 38.47 20.826 38.47 20.412 Z" style="fill: rgb(51, 51, 51); paint-order: stroke; stroke: rgb(255, 255, 255); text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 《ゲーム1》アイコン
#[component]
fn IconOnceGame() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 50 24" style="vertical-align: middle; position: relative; top: -1px;" title="《ゲーム1回》">
            <path d="M 8.115 3.181 H 41.886 A 4.087 4.087 0 0 1 45.973 7.268 V 16.732 A 4.087 4.087 0 0 1 41.886 20.819 H 8.115 A 4.087 4.087 0 0 1 4.028 16.732 V 7.268 A 4.087 4.087 0 0 1 8.115 3.181 Z" style="fill: rgb(255, 255, 255); stroke: rgb(255, 0, 0);"></path>
            <path d="M 14.451 9.271 Q 14.313 9.375 14.129 9.375 Q 13.934 9.375 13.796 9.145 Q 13.566 8.777 13.301 8.478 Q 13.163 8.317 13.163 8.156 Q 13.163 7.972 13.37 7.822 L 13.543 7.684 Q 13.646 7.604 13.796 7.604 Q 13.945 7.604 14.026 7.707 Q 14.083 7.776 14.123 7.822 Q 14.164 7.868 14.238 7.949 Q 14.313 8.029 14.411 8.156 Q 14.509 8.282 14.572 8.374 Q 14.635 8.466 14.675 8.518 Q 14.716 8.57 14.767 8.645 Q 14.819 8.719 14.819 8.823 Q 14.819 9.018 14.658 9.122 Z M 8.736 16.988 Q 8.621 17.068 8.442 17.068 Q 8.264 17.068 8.103 16.861 Q 7.85 16.539 7.482 16.194 Q 7.31 16.045 7.31 15.878 Q 7.31 15.711 7.528 15.573 Q 8.448 14.987 9.023 14.211 Q 9.598 13.434 9.782 12.342 L 9.782 12.342 Q 9.794 12.307 9.794 12.261 Q 9.794 12.215 9.742 12.152 Q 9.69 12.089 9.564 12.089 L 8.322 12.089 Q 8.207 12.089 8.149 12.158 Q 8.057 12.273 7.856 12.491 Q 7.655 12.71 7.425 12.94 Q 7.08 13.25 6.884 13.388 Q 6.689 13.526 6.585 13.526 Q 6.378 13.526 6.206 13.342 Q 5.976 13.101 5.585 12.779 Q 5.401 12.629 5.401 12.468 Q 5.401 12.296 5.596 12.146 Q 6.907 11.169 7.735 9.501 Q 8 8.984 8.161 8.455 Q 8.276 8.133 8.575 8.133 Q 8.655 8.133 8.724 8.156 L 9.621 8.42 Q 9.817 8.478 9.897 8.627 Q 9.932 8.708 9.932 8.806 Q 9.932 8.903 9.897 9.03 Q 9.702 9.57 9.541 9.915 Q 9.449 10.122 9.449 10.237 Q 9.449 10.283 9.46 10.295 Q 9.506 10.387 9.713 10.387 L 13.635 10.387 Q 13.83 10.387 13.957 10.508 Q 14.083 10.628 14.083 10.835 L 14.083 11.652 Q 14.083 11.847 13.957 11.968 Q 13.83 12.089 13.635 12.089 L 11.852 12.089 Q 11.737 12.089 11.685 12.146 Q 11.634 12.204 11.611 12.307 Q 11.45 13.837 10.714 14.975 Q 9.978 16.114 8.736 16.988 Z M 13.117 10.111 Q 12.91 10.111 12.715 9.8 Q 12.554 9.547 12.289 9.237 Q 12.14 9.064 12.14 8.886 Q 12.14 8.708 12.335 8.57 L 12.519 8.443 Q 12.623 8.351 12.772 8.351 Q 12.922 8.351 13.002 8.455 Q 13.06 8.524 13.094 8.57 Q 13.106 8.581 13.186 8.673 L 13.577 9.156 Q 13.623 9.237 13.709 9.346 Q 13.796 9.455 13.796 9.582 Q 13.796 9.766 13.635 9.869 L 13.428 10.019 Q 13.29 10.111 13.117 10.111 Z M 25.581 13.147 Q 25.581 13.285 25.523 13.365 Q 25.443 13.48 25.27 13.48 L 24.741 13.457 Q 23.752 13.423 22.131 13.423 L 20.59 13.423 Q 18.037 13.423 17.232 13.492 Q 17.209 13.492 17.197 13.492 Q 17.036 13.492 16.956 13.377 Q 16.898 13.296 16.898 13.17 L 16.898 12.917 L 16.887 12.319 L 16.887 12.077 Q 16.887 12.054 16.887 12.043 Q 16.887 11.905 16.967 11.819 Q 17.048 11.732 17.186 11.732 L 17.611 11.744 Q 18.094 11.767 18.807 11.767 L 20.337 11.778 L 20.751 11.778 L 21.567 11.79 L 21.981 11.79 Q 23.729 11.79 24.776 11.755 L 25.282 11.744 Q 25.408 11.744 25.495 11.824 Q 25.581 11.905 25.581 12.043 Q 25.581 12.054 25.581 12.077 Z M 31.754 13.791 Q 31.754 13.929 31.95 13.929 Q 32.019 13.929 32.369 13.889 Q 32.72 13.848 32.95 13.825 Q 33.18 13.802 33.393 13.774 Q 33.606 13.745 33.772 13.728 Q 33.939 13.71 33.962 13.653 Q 33.962 13.641 33.962 13.618 Q 33.962 13.572 33.905 13.48 Q 33.617 13.112 33.456 12.94 Q 33.295 12.767 33.295 12.601 Q 33.295 12.434 33.491 12.307 L 34.146 11.882 Q 34.238 11.813 34.399 11.813 Q 34.56 11.813 34.675 11.916 Q 35.802 12.928 37.067 14.895 Q 37.148 15.021 37.148 15.148 Q 37.148 15.205 37.125 15.263 Q 37.067 15.447 36.883 15.539 Q 36.515 15.734 36.159 16.033 Q 36.021 16.137 35.819 16.137 Q 35.618 16.137 35.48 15.884 Q 35.4 15.746 35.319 15.602 Q 35.239 15.458 35.124 15.297 Q 35.066 15.194 34.963 15.194 Q 34.94 15.194 30.558 15.792 Q 29.04 16.022 28.994 16.028 Q 28.948 16.033 28.914 16.033 Q 28.787 16.033 28.684 15.964 Q 28.546 15.884 28.5 15.7 L 28.224 14.676 Q 28.212 14.619 28.212 14.561 Q 28.212 14.4 28.327 14.308 Q 28.408 14.251 28.557 14.239 Q 28.661 14.239 28.856 14.216 L 29.592 14.159 Q 29.719 14.159 29.776 14.044 Q 30.386 12.825 31.214 10.651 Q 31.57 9.72 31.674 9.398 Q 31.777 9.076 31.823 8.961 Q 31.927 8.639 32.226 8.639 Q 32.295 8.639 32.364 8.65 L 33.433 8.949 Q 33.64 9.007 33.709 9.156 Q 33.744 9.237 33.744 9.312 Q 33.744 9.386 33.698 9.478 Q 33.652 9.57 33.611 9.657 Q 33.571 9.743 33.456 9.984 Q 33.341 10.226 33.088 10.778 L 31.8 13.607 Q 31.754 13.71 31.754 13.791 Z" transform="matrix(0.837012, 0, 0, 1, 2.871699, 0)" style="fill: rgb(255, 0, 0); paint-order: stroke; stroke: rgb(255, 255, 255); text-wrap-mode: nowrap;"></path>
            <path d="M 38.47 20.412 L 38.47 7.882 Q 38.47 6.833 37.808 6.833 Q 37.532 6.833 37.062 7.137 L 36.014 7.827 Q 35.738 8.02 35.393 8.02 Q 35.048 8.02 34.744 7.551 L 33.971 6.309 Q 33.502 5.536 34.275 5.067 L 39.022 2.113 Q 39.243 1.975 39.491 1.975 L 40.844 1.975 Q 41.258 1.975 41.506 2.224 Q 41.754 2.472 41.754 2.886 L 41.754 20.412 Q 41.754 20.826 41.506 21.075 Q 41.258 21.323 40.844 21.323 L 39.381 21.323 Q 38.967 21.323 38.718 21.075 Q 38.47 20.826 38.47 20.412 Z" style="fill: rgb(255, 0, 0); paint-order: stroke; stroke: rgb(255, 255, 255); text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 《クロスアイコン》アイコン
#[component]
fn IconCross() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 106 30" style="vertical-align: middle; position: relative; top: -1px;" title="《クロスアイコン》">
            <path d="M 10.976 15.001 L 0.849 0.983 L 105.142 0.983 L 94.878 14.996 L 105.15 29.018 L 0.851 29.018 L 10.976 15.001 Z" style="stroke-width: 1; fill: rgb(255, 255, 255);"></path>
            <path d="M 3.557 27.851 L 12.727 15.001 L 3.556 2.15 L 102.294 2.15 L 93.126 14.995 L 102.301 27.851 L 3.557 27.851 Z" style="fill: rgb(67, 67, 67); stroke: rgb(0, 0, 0); stroke-width: 1;"></path>
            <path d="M 128.659 100.751 Q 128.659 100.633 128.462 100.633 L 125.507 100.791 Q 125.329 100.791 125.211 100.929 Q 123.674 102.82 121.764 104.238 Q 121.606 104.376 121.36 104.376 Q 121.113 104.376 120.976 104.218 Q 120.956 104.179 120.916 104.14 Q 120.877 104.12 120.857 104.1 L 120.719 103.943 Q 119.991 103.214 119.616 102.938 Q 119.34 102.741 119.34 102.524 Q 119.34 102.308 119.597 102.15 Q 121.192 101.126 122.65 99.392 Q 124.088 97.639 124.837 95.905 Q 125.053 95.413 125.487 95.413 Q 125.644 95.413 125.802 95.472 L 127.319 96.023 Q 127.614 96.122 127.713 96.358 Q 127.752 96.476 127.752 96.595 Q 127.752 96.772 127.624 97.048 Q 127.496 97.323 127.368 97.58 Q 127.24 97.836 127.24 97.914 Q 127.26 97.934 127.299 97.934 Q 127.299 97.934 127.378 97.934 Q 129.486 97.934 130.786 97.717 L 130.806 97.717 Q 131.082 97.717 131.259 97.816 L 132.342 98.407 Q 132.756 98.643 132.756 99.037 Q 132.756 99.156 132.717 99.293 Q 131.417 102.997 128.501 106.011 Q 125.96 108.612 122 110.582 Q 121.862 110.641 121.626 110.641 Q 121.33 110.641 121.113 110.286 Q 120.818 109.774 119.971 108.73 Q 119.794 108.552 119.794 108.355 Q 119.794 108.08 120.128 107.961 Q 124.147 106.385 126.945 103.233 Q 127.89 102.189 128.58 100.988 Q 128.659 100.83 128.659 100.751 Z M 140.042 107.567 L 140.042 98.663 Q 140.042 98.328 140.249 98.111 Q 140.456 97.895 140.811 97.895 L 150.976 97.895 Q 151.331 97.895 151.537 98.111 Q 151.744 98.328 151.744 98.663 L 151.744 107.567 Q 151.744 107.902 151.537 108.119 Q 151.331 108.336 150.976 108.336 L 140.811 108.336 Q 140.456 108.336 140.249 108.119 Q 140.042 107.902 140.042 107.567 Z M 143.51 105.499 L 148.277 105.499 Q 148.454 105.499 148.563 105.391 Q 148.671 105.282 148.671 105.085 L 148.671 101.165 Q 148.671 100.968 148.563 100.86 Q 148.454 100.751 148.277 100.751 L 143.51 100.751 Q 143.332 100.751 143.224 100.86 Q 143.116 100.968 143.116 101.165 L 143.116 105.085 Q 143.116 105.282 143.224 105.391 Q 143.332 105.499 143.51 105.499 Z M 166.655 100.062 Q 166.655 99.884 166.339 99.884 Q 165.985 99.884 163.414 100.072 Q 160.843 100.259 160.804 100.259 Q 160.548 100.259 160.341 100.081 Q 160.134 99.904 160.094 99.589 L 159.917 98.013 Q 159.917 97.974 159.917 97.914 Q 159.917 97.54 160.173 97.343 Q 160.351 97.186 160.685 97.166 L 160.685 97.166 Q 164.428 97.166 168.29 96.792 Q 168.565 96.772 168.703 96.742 Q 168.841 96.713 168.9 96.713 Q 169.117 96.713 169.314 96.851 L 170.516 97.619 Q 170.732 97.757 170.831 98.013 Q 170.87 98.111 170.87 98.239 Q 170.87 98.368 170.811 98.525 Q 170.004 100.613 168.703 102.426 Q 168.625 102.583 168.625 102.721 Q 168.625 102.859 168.802 103.017 Q 171.186 104.908 172.821 106.74 Q 173.037 106.976 173.037 107.233 Q 173.037 107.607 172.683 107.863 Q 172.368 108.08 172.141 108.306 Q 171.914 108.533 171.777 108.661 Q 171.639 108.789 171.461 108.966 Q 171.225 109.203 170.9 109.203 Q 170.575 109.203 170.299 108.868 Q 168.25 106.504 166.871 105.243 Q 166.753 105.144 166.595 105.144 Q 166.438 105.144 166.32 105.282 Q 163.7 107.961 160.488 109.675 Q 160.331 109.774 160.045 109.774 Q 159.76 109.774 159.523 109.439 Q 159.129 108.769 158.656 108.237 Q 158.381 107.922 158.381 107.666 Q 158.381 107.311 158.794 107.095 Q 162.261 105.4 164.96 102.386 Q 165.827 101.401 166.517 100.377 Q 166.655 100.18 166.655 100.062 Z" transform="matrix(1.121962, 0, 0, 1.269534, -111.351166, -116.281868)" style="fill: rgb(255, 255, 255); paint-order: fill; stroke: rgb(0, 0, 0); text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 《相手ターン》
#[component]
fn IconOpponentTurn() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 74 24" style="vertical-align: middle; position: relative; top: -1px;" title="《相手ターン》">
            <rect x="2.016" y="2.103" width="69.968" height="19.793" style="stroke-width: 1.06; stroke: rgb(255, 0, 0); fill: rgb(255, 0, 0);" rx="1.357" ry="1.357"></rect>
            <rect x="2.983" y="3.07" width="68.033" height="17.858" style="fill: rgb(255, 0, 0); stroke: rgb(255, 255, 255); stroke-width: 1.06;" rx="1.086" ry="1.086"></rect>
            <path d="M 6.982 17.445 L 6.982 14.442 Q 6.982 14.208 6.911 14.208 Q 6.839 14.208 6.722 14.39 Q 6.605 14.572 6.501 14.709 Q 6.397 14.845 6.345 14.936 Q 6.163 15.235 5.988 15.235 Q 5.812 15.235 5.643 15.092 Q 5.253 14.741 4.869 14.488 Q 4.486 14.234 4.772 13.909 Q 5.63 12.973 6.527 11.205 Q 6.592 11.062 6.657 10.932 Q 6.722 10.802 6.8 10.614 Q 6.878 10.425 6.768 10.269 Q 6.657 10.113 6.397 10.113 L 5.435 10.1 Q 5.253 10.1 5.136 9.983 Q 5.019 9.866 5.019 9.684 L 5.019 8.878 Q 5.019 8.683 5.136 8.566 Q 5.253 8.449 5.448 8.449 L 6.553 8.449 Q 6.748 8.449 6.865 8.332 Q 6.982 8.215 6.982 8.02 L 6.982 6.499 Q 6.982 6.304 7.099 6.187 Q 7.216 6.07 7.411 6.07 L 8.386 6.07 Q 8.581 6.07 8.698 6.187 Q 8.815 6.304 8.815 6.499 L 8.815 8.02 Q 8.815 8.215 8.932 8.332 Q 9.049 8.449 9.244 8.449 L 9.855 8.449 Q 10.05 8.449 10.167 8.566 Q 10.284 8.683 10.284 8.878 L 10.284 9.671 Q 10.284 9.866 10.167 9.983 Q 10.05 10.1 9.855 10.1 L 9.218 10.1 Q 8.815 10.1 8.815 10.503 L 8.815 10.75 Q 8.815 10.919 8.919 11.03 Q 9.023 11.14 9.134 11.264 Q 9.244 11.387 9.387 11.53 Q 9.777 11.946 9.933 12.083 Q 10.089 12.219 10.239 12.369 Q 10.388 12.518 10.499 12.518 Q 10.609 12.518 10.609 12.297 L 10.609 6.941 Q 10.609 6.746 10.726 6.629 Q 10.843 6.512 11.038 6.512 L 15.887 6.512 Q 16.082 6.512 16.199 6.629 Q 16.316 6.746 16.316 6.941 L 16.316 17.055 Q 16.316 17.25 16.199 17.367 Q 16.082 17.484 15.887 17.484 L 11.038 17.484 Q 10.843 17.484 10.726 17.367 Q 10.609 17.25 10.609 17.055 L 10.609 13.402 Q 10.609 13.181 10.492 13.181 Q 10.336 13.181 10.063 13.584 Q 9.972 13.688 9.907 13.773 Q 9.842 13.857 9.771 13.942 Q 9.699 14.026 9.608 14.026 Q 9.517 14.026 9.439 13.948 L 9.036 13.519 Q 8.815 13.298 8.815 13.61 L 8.815 17.445 Q 8.815 17.64 8.698 17.757 Q 8.581 17.874 8.386 17.874 L 7.411 17.874 Q 7.216 17.874 7.099 17.757 Q 6.982 17.64 6.982 17.445 Z M 12.871 9.58 L 14.054 9.58 Q 14.249 9.58 14.366 9.463 Q 14.483 9.346 14.483 9.151 L 14.483 8.592 Q 14.483 8.397 14.366 8.28 Q 14.249 8.163 14.054 8.163 L 12.871 8.163 Q 12.676 8.163 12.559 8.28 Q 12.442 8.397 12.442 8.592 L 12.442 9.151 Q 12.442 9.346 12.559 9.463 Q 12.676 9.58 12.871 9.58 Z M 12.871 12.674 L 14.054 12.674 Q 14.249 12.674 14.366 12.557 Q 14.483 12.44 14.483 12.245 L 14.483 11.595 Q 14.483 11.4 14.366 11.283 Q 14.249 11.166 14.054 11.166 L 12.871 11.166 Q 12.676 11.166 12.559 11.283 Q 12.442 11.4 12.442 11.595 L 12.442 12.245 Q 12.442 12.44 12.559 12.557 Q 12.676 12.674 12.871 12.674 Z M 12.871 15.833 L 14.054 15.833 Q 14.249 15.833 14.366 15.716 Q 14.483 15.599 14.483 15.404 L 14.483 14.689 Q 14.483 14.494 14.366 14.377 Q 14.249 14.26 14.054 14.26 L 12.871 14.26 Q 12.676 14.26 12.559 14.377 Q 12.442 14.494 12.442 14.689 L 12.442 15.404 Q 12.442 15.599 12.559 15.716 Q 12.676 15.833 12.871 15.833 Z M 21.722 17.614 Q 21.605 16.769 21.449 16.275 Q 21.371 15.989 21.644 15.989 L 22.476 15.989 Q 22.749 15.989 22.879 15.911 Q 22.996 15.833 22.996 15.56 L 22.996 14.442 Q 22.996 14.247 22.879 14.13 Q 22.762 14.013 22.567 14.013 L 18.303 14.013 Q 18.108 14.013 17.991 13.896 Q 17.874 13.779 17.874 13.584 L 17.874 12.622 Q 17.874 12.427 17.991 12.31 Q 18.108 12.193 18.303 12.193 L 22.567 12.193 Q 22.762 12.193 22.879 12.076 Q 22.996 11.959 22.996 11.764 Q 22.996 11.569 22.879 11.452 Q 22.762 11.335 22.567 11.335 L 19.304 11.335 Q 19.109 11.335 18.992 11.218 Q 18.875 11.101 18.875 10.906 L 18.875 9.983 Q 18.875 9.788 18.992 9.671 Q 19.109 9.554 19.304 9.554 L 22.567 9.554 Q 22.762 9.554 22.879 9.437 Q 22.996 9.32 22.996 9.125 L 22.996 9.06 Q 22.996 8.852 22.872 8.735 Q 22.749 8.618 22.541 8.644 Q 20.981 8.735 19.421 8.761 Q 19.057 8.761 18.992 8.397 Q 18.927 8.137 18.875 7.897 Q 18.823 7.656 18.745 7.396 Q 18.615 6.98 19.044 6.98 Q 19.356 6.993 19.681 6.993 Q 19.681 6.993 20.37 6.993 Q 24.803 6.915 27.26 6.031 Q 27.585 5.927 27.767 6.174 L 28.43 7.071 Q 28.586 7.279 28.527 7.455 Q 28.469 7.63 28.222 7.708 Q 27.26 8.02 25.44 8.319 Q 25.076 8.371 25.076 8.735 L 25.076 9.125 Q 25.076 9.32 25.193 9.437 Q 25.31 9.554 25.505 9.554 L 28.508 9.554 Q 28.703 9.554 28.82 9.671 Q 28.937 9.788 28.937 9.983 L 28.937 10.906 Q 28.937 11.101 28.82 11.218 Q 28.703 11.335 28.508 11.335 L 25.505 11.335 Q 25.31 11.335 25.193 11.452 Q 25.076 11.569 25.076 11.764 Q 25.076 11.959 25.193 12.076 Q 25.31 12.193 25.505 12.193 L 29.522 12.193 Q 29.717 12.193 29.834 12.31 Q 29.951 12.427 29.951 12.622 L 29.951 13.584 Q 29.951 13.779 29.834 13.896 Q 29.717 14.013 29.522 14.013 L 25.505 14.013 Q 25.31 14.013 25.193 14.13 Q 25.076 14.247 25.076 14.442 L 25.076 16.392 Q 25.076 17.666 23.932 17.874 Q 23.581 17.939 23.165 17.939 L 22.086 17.939 Q 21.761 17.939 21.722 17.614 Z M 38.554 10.282 Q 38.554 10.217 38.424 10.217 Q 38.411 10.217 38.385 10.217 Q 38.385 10.217 37.813 10.243 L 36.851 10.295 L 36.318 10.321 Q 36.162 10.347 36.11 10.438 Q 35.187 11.764 33.978 12.817 Q 33.809 12.934 33.627 12.934 Q 33.445 12.934 33.302 12.778 Q 32.847 12.284 32.6 12.102 L 32.6 12.102 Q 32.405 11.933 32.405 11.751 Q 32.405 11.569 32.6 11.413 Q 33.536 10.646 34.388 9.483 Q 35.239 8.319 35.655 7.149 Q 35.72 6.941 35.902 6.85 Q 35.993 6.798 36.097 6.798 Q 36.201 6.798 36.292 6.837 L 37.241 7.136 Q 37.436 7.201 37.514 7.37 Q 37.553 7.448 37.553 7.539 Q 37.553 7.63 37.527 7.734 Q 37.384 8.124 37.241 8.397 Q 37.215 8.514 37.228 8.54 Q 37.254 8.579 37.345 8.566 Q 38.229 8.527 38.535 8.521 Q 38.84 8.514 39.061 8.495 Q 39.282 8.475 39.438 8.469 Q 39.594 8.462 39.659 8.456 Q 39.724 8.449 39.776 8.449 Q 39.906 8.449 40.01 8.501 L 40.751 8.891 Q 41.037 9.034 41.037 9.294 Q 41.037 9.385 40.998 9.489 Q 40.491 11.01 39.724 12.245 Q 39.659 12.349 39.659 12.434 Q 39.659 12.518 39.763 12.609 Q 40.27 13.012 40.725 13.454 Q 40.842 13.584 40.842 13.734 Q 40.842 13.883 40.686 14.039 Q 40.621 14.091 40.569 14.143 Q 40.4 14.286 40.257 14.462 Q 40.114 14.637 40.03 14.728 Q 39.945 14.819 39.9 14.884 Q 39.854 14.949 39.789 15.04 Q 39.685 15.17 39.536 15.17 Q 39.386 15.17 39.269 15.014 Q 39.074 14.806 38.834 14.585 Q 38.593 14.364 38.502 14.273 Q 38.411 14.182 38.307 14.182 Q 38.203 14.182 38.112 14.273 Q 36.396 16.028 33.861 17.107 Q 33.757 17.159 33.653 17.159 Q 33.38 17.159 33.211 16.873 L 33.211 16.86 Q 33.003 16.405 32.691 16.002 Q 32.561 15.846 32.561 15.716 Q 32.561 15.482 32.847 15.378 Q 34.94 14.546 36.565 12.986 Q 36.643 12.921 36.643 12.856 Q 36.604 12.739 36.253 12.57 L 35.954 12.401 Q 35.72 12.284 35.72 12.089 Q 35.72 11.959 35.824 11.829 L 36.461 11.01 Q 36.617 10.815 36.838 10.815 Q 36.942 10.815 37.046 10.854 L 37.215 10.932 L 37.41 11.036 Q 37.462 11.075 37.566 11.114 L 37.748 11.218 Q 37.813 11.257 37.911 11.257 Q 38.008 11.257 38.06 11.179 Q 38.138 11.049 38.203 10.945 Q 38.32 10.776 38.528 10.347 Q 38.554 10.308 38.554 10.282 Z M 54.802 12.622 Q 54.802 12.778 54.737 12.869 Q 54.646 12.999 54.451 12.999 L 53.853 12.973 Q 52.735 12.934 50.902 12.934 L 49.16 12.934 Q 46.274 12.934 45.364 13.012 Q 45.338 13.012 45.325 13.012 Q 45.143 13.012 45.052 12.882 Q 44.987 12.791 44.987 12.648 L 44.987 12.362 L 44.974 11.686 L 44.974 11.413 Q 44.974 11.387 44.974 11.374 Q 44.974 11.218 45.065 11.121 Q 45.156 11.023 45.312 11.023 L 45.793 11.036 Q 46.339 11.062 47.145 11.062 L 48.874 11.075 L 49.342 11.075 L 50.265 11.088 L 50.733 11.088 Q 52.709 11.088 53.892 11.049 L 54.464 11.036 Q 54.607 11.036 54.704 11.127 Q 54.802 11.218 54.802 11.374 Q 54.802 11.387 54.802 11.413 Z M 61.117 10.945 Q 61 11.075 60.831 11.075 Q 60.662 11.075 60.402 10.854 Q 59.856 10.373 59.375 10.074 Q 59.037 9.853 58.764 9.697 Q 58.543 9.554 58.543 9.372 Q 58.543 9.242 58.647 9.099 L 59.401 8.15 Q 59.544 7.955 59.726 7.955 Q 59.921 7.955 60.181 8.124 Q 60.883 8.553 61.338 8.885 Q 61.793 9.216 61.897 9.32 Q 62.066 9.45 62.066 9.639 Q 62.066 9.827 61.936 9.983 Z M 58.894 14.949 Q 58.803 14.78 58.803 14.663 Q 58.803 14.299 59.219 14.182 Q 61.052 13.701 63.197 12.284 Q 65.654 10.672 66.538 9.359 Q 66.642 9.203 66.772 9.203 Q 66.928 9.203 67.019 9.424 L 67.123 9.736 Q 67.318 10.295 67.461 10.568 Q 67.604 10.841 67.604 10.984 Q 67.604 11.153 67.487 11.283 Q 66.239 12.83 64.12 14.208 Q 62.131 15.495 60.064 16.21 Q 59.973 16.249 59.882 16.249 Q 59.622 16.249 59.479 15.989 Z" style="fill: rgb(255, 255, 255); stroke-width: 1.06px; text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 《自分ターン》
#[component]
fn IconMyTurn() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 74 24" style="vertical-align: middle; position: relative; top: -1px;" title="《自分ターン》">
            <rect x="2.016" y="2.103" width="69.968" height="19.793" style="stroke-width: 1.06; stroke: rgb(3, 101, 165); fill: rgb(3, 101, 165);" rx="1.046" ry="1.046"></rect>
            <rect x="2.983" y="3.07" width="68.033" height="17.858" style="stroke: rgb(255, 255, 255); stroke-width: 1.06; fill: rgb(3, 101, 165);" rx="1.165" ry="1.165"></rect>
            <path d="M 6.384 17.055 L 6.384 8.007 Q 6.384 7.812 6.501 7.695 Q 6.618 7.578 6.813 7.578 L 8.672 7.578 Q 8.997 7.578 9.075 7.279 L 9.192 6.928 L 9.426 6.096 Q 9.465 5.914 9.66 5.914 L 11.48 6.07 Q 11.636 6.083 11.695 6.174 Q 11.753 6.265 11.708 6.369 Q 11.662 6.473 11.63 6.551 Q 11.597 6.629 11.558 6.72 L 11.35 7.149 Q 11.259 7.344 11.331 7.461 Q 11.402 7.578 11.623 7.578 L 14.977 7.578 Q 15.172 7.578 15.289 7.695 Q 15.406 7.812 15.406 8.007 L 15.406 17.055 Q 15.406 17.25 15.289 17.367 Q 15.172 17.484 14.977 17.484 L 6.813 17.484 Q 6.618 17.484 6.501 17.367 Q 6.384 17.25 6.384 17.055 Z M 8.828 10.36 L 12.962 10.36 Q 13.157 10.36 13.274 10.243 Q 13.391 10.126 13.391 9.931 L 13.391 9.684 Q 13.391 9.489 13.274 9.372 Q 13.157 9.255 12.962 9.255 L 8.828 9.255 Q 8.633 9.255 8.516 9.372 Q 8.399 9.489 8.399 9.684 L 8.399 9.931 Q 8.399 10.126 8.516 10.243 Q 8.633 10.36 8.828 10.36 Z M 8.828 13.09 L 12.962 13.09 Q 13.157 13.09 13.274 12.973 Q 13.391 12.856 13.391 12.661 L 13.391 12.427 Q 13.391 12.232 13.274 12.115 Q 13.157 11.998 12.962 11.998 L 8.828 11.998 Q 8.633 11.998 8.516 12.115 Q 8.399 12.232 8.399 12.427 L 8.399 12.661 Q 8.399 12.856 8.516 12.973 Q 8.633 13.09 8.828 13.09 Z M 8.828 15.807 L 12.962 15.807 Q 13.157 15.807 13.274 15.69 Q 13.391 15.573 13.391 15.378 L 13.391 15.157 Q 13.391 14.962 13.274 14.845 Q 13.157 14.728 12.962 14.728 L 8.828 14.728 Q 8.633 14.728 8.516 14.845 Q 8.399 14.962 8.399 15.157 L 8.399 15.378 Q 8.399 15.573 8.516 15.69 Q 8.633 15.807 8.828 15.807 Z M 19.889 17.796 Q 19.525 17.926 19.317 17.523 Q 19.031 16.951 18.81 16.665 Q 18.524 16.262 18.966 16.132 Q 20.097 15.755 20.909 14.982 Q 21.722 14.208 22.021 13.038 Q 22.086 12.817 21.969 12.687 Q 21.852 12.557 21.631 12.557 L 20.76 12.557 Q 20.565 12.557 20.448 12.44 Q 20.331 12.323 20.331 12.128 L 20.331 12.037 Q 20.331 11.751 20.175 11.751 Q 20.084 11.751 19.921 11.894 Q 19.759 12.037 19.57 12.18 Q 19.382 12.323 19.226 12.44 Q 19.07 12.557 18.901 12.557 Q 18.732 12.557 18.563 12.349 Q 18.173 11.842 17.815 11.524 Q 17.458 11.205 17.906 10.913 Q 18.355 10.62 18.797 10.23 Q 19.239 9.84 19.629 9.398 Q 20.526 8.41 20.955 7.5 Q 21.085 7.227 21.345 7.227 Q 21.449 7.227 21.553 7.279 L 22.593 7.812 Q 22.762 7.89 22.814 8.046 Q 22.866 8.202 22.697 8.501 Q 22.268 9.307 21.683 10.035 Q 21.462 10.334 21.533 10.503 Q 21.605 10.672 21.982 10.672 L 25.752 10.672 Q 26.116 10.672 26.187 10.51 Q 26.259 10.347 25.999 9.996 Q 25.427 9.229 25.076 8.293 Q 24.959 7.981 24.66 7.981 L 23.464 7.981 Q 23.269 7.981 23.152 7.864 Q 23.035 7.747 23.035 7.552 L 23.035 6.603 Q 23.035 6.408 23.152 6.291 Q 23.269 6.174 23.464 6.174 L 26.168 6.174 Q 26.35 6.174 26.467 6.278 Q 26.584 6.382 26.61 6.551 Q 26.831 7.799 27.793 8.878 Q 28.586 9.788 29.873 10.503 Q 30.328 10.763 29.951 11.212 Q 29.574 11.66 29.21 12.245 Q 29.106 12.427 28.956 12.427 Q 28.807 12.427 28.703 12.362 Q 28.599 12.297 28.482 12.226 Q 28.365 12.154 28.287 12.109 Q 28.209 12.063 28.118 12.005 Q 28.027 11.946 27.962 11.946 Q 27.845 11.946 27.819 12.167 Q 27.741 15.053 27.377 16.249 Q 27.065 17.341 26.077 17.666 Q 25.57 17.835 24.803 17.835 L 24.088 17.835 Q 23.763 17.835 23.724 17.51 Q 23.711 17.432 23.704 17.354 Q 23.698 17.276 23.659 17.094 Q 23.542 16.444 23.451 16.145 Q 23.36 15.846 23.659 15.846 L 24.478 15.846 Q 24.985 15.846 25.219 15.69 Q 25.583 15.482 25.739 14.468 Q 25.83 13.896 25.83 12.986 Q 25.843 12.791 25.726 12.674 Q 25.609 12.557 25.414 12.557 L 24.439 12.557 Q 24.27 12.557 24.153 12.661 Q 24.036 12.765 24.01 12.934 Q 23.737 14.754 22.671 15.97 Q 21.605 17.185 19.889 17.796 Z M 38.554 10.282 Q 38.554 10.217 38.424 10.217 Q 38.411 10.217 38.385 10.217 Q 38.385 10.217 37.813 10.243 L 36.851 10.295 L 36.318 10.321 Q 36.162 10.347 36.11 10.438 Q 35.187 11.764 33.978 12.817 Q 33.809 12.934 33.627 12.934 Q 33.445 12.934 33.302 12.778 Q 32.847 12.284 32.6 12.102 L 32.6 12.102 Q 32.405 11.933 32.405 11.751 Q 32.405 11.569 32.6 11.413 Q 33.536 10.646 34.388 9.483 Q 35.239 8.319 35.655 7.149 Q 35.72 6.941 35.902 6.85 Q 35.993 6.798 36.097 6.798 Q 36.201 6.798 36.292 6.837 L 37.241 7.136 Q 37.436 7.201 37.514 7.37 Q 37.553 7.448 37.553 7.539 Q 37.553 7.63 37.527 7.734 Q 37.384 8.124 37.241 8.397 Q 37.215 8.514 37.228 8.54 Q 37.254 8.579 37.345 8.566 Q 38.229 8.527 38.535 8.521 Q 38.84 8.514 39.061 8.495 Q 39.282 8.475 39.438 8.469 Q 39.594 8.462 39.659 8.456 Q 39.724 8.449 39.776 8.449 Q 39.906 8.449 40.01 8.501 L 40.751 8.891 Q 41.037 9.034 41.037 9.294 Q 41.037 9.385 40.998 9.489 Q 40.491 11.01 39.724 12.245 Q 39.659 12.349 39.659 12.434 Q 39.659 12.518 39.763 12.609 Q 40.27 13.012 40.725 13.454 Q 40.842 13.584 40.842 13.734 Q 40.842 13.883 40.686 14.039 Q 40.621 14.091 40.569 14.143 Q 40.4 14.286 40.257 14.462 Q 40.114 14.637 40.03 14.728 Q 39.945 14.819 39.9 14.884 Q 39.854 14.949 39.789 15.04 Q 39.685 15.17 39.536 15.17 Q 39.386 15.17 39.269 15.014 Q 39.074 14.806 38.834 14.585 Q 38.593 14.364 38.502 14.273 Q 38.411 14.182 38.307 14.182 Q 38.203 14.182 38.112 14.273 Q 36.396 16.028 33.861 17.107 Q 33.757 17.159 33.653 17.159 Q 33.38 17.159 33.211 16.873 L 33.211 16.86 Q 33.003 16.405 32.691 16.002 Q 32.561 15.846 32.561 15.716 Q 32.561 15.482 32.847 15.378 Q 34.94 14.546 36.565 12.986 Q 36.643 12.921 36.643 12.856 Q 36.604 12.739 36.253 12.57 L 35.954 12.401 Q 35.72 12.284 35.72 12.089 Q 35.72 11.959 35.824 11.829 L 36.461 11.01 Q 36.617 10.815 36.838 10.815 Q 36.942 10.815 37.046 10.854 L 37.215 10.932 L 37.41 11.036 Q 37.462 11.075 37.566 11.114 L 37.748 11.218 Q 37.813 11.257 37.911 11.257 Q 38.008 11.257 38.06 11.179 Q 38.138 11.049 38.203 10.945 Q 38.32 10.776 38.528 10.347 Q 38.554 10.308 38.554 10.282 Z M 54.802 12.622 Q 54.802 12.778 54.737 12.869 Q 54.646 12.999 54.451 12.999 L 53.853 12.973 Q 52.735 12.934 50.902 12.934 L 49.16 12.934 Q 46.274 12.934 45.364 13.012 Q 45.338 13.012 45.325 13.012 Q 45.143 13.012 45.052 12.882 Q 44.987 12.791 44.987 12.648 L 44.987 12.362 L 44.974 11.686 L 44.974 11.413 Q 44.974 11.387 44.974 11.374 Q 44.974 11.218 45.065 11.121 Q 45.156 11.023 45.312 11.023 L 45.793 11.036 Q 46.339 11.062 47.145 11.062 L 48.874 11.075 L 49.342 11.075 L 50.265 11.088 L 50.733 11.088 Q 52.709 11.088 53.892 11.049 L 54.464 11.036 Q 54.607 11.036 54.704 11.127 Q 54.802 11.218 54.802 11.374 Q 54.802 11.387 54.802 11.413 Z M 61.117 10.945 Q 61 11.075 60.831 11.075 Q 60.662 11.075 60.402 10.854 Q 59.856 10.373 59.375 10.074 Q 59.037 9.853 58.764 9.697 Q 58.543 9.554 58.543 9.372 Q 58.543 9.242 58.647 9.099 L 59.401 8.15 Q 59.544 7.955 59.726 7.955 Q 59.921 7.955 60.181 8.124 Q 60.883 8.553 61.338 8.885 Q 61.793 9.216 61.897 9.32 Q 62.066 9.45 62.066 9.639 Q 62.066 9.827 61.936 9.983 Z M 58.894 14.949 Q 58.803 14.78 58.803 14.663 Q 58.803 14.299 59.219 14.182 Q 61.052 13.701 63.197 12.284 Q 65.654 10.672 66.538 9.359 Q 66.642 9.203 66.772 9.203 Q 66.928 9.203 67.019 9.424 L 67.123 9.736 Q 67.318 10.295 67.461 10.568 Q 67.604 10.841 67.604 10.984 Q 67.604 11.153 67.487 11.283 Q 66.239 12.83 64.12 14.208 Q 62.131 15.495 60.064 16.21 Q 59.973 16.249 59.882 16.249 Q 59.622 16.249 59.479 15.989 Z" style="fill: rgb(255, 255, 255); stroke-width: 1.06px; text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 《ダウン》アイコン
#[component]
fn IconDown() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 24 24" style="vertical-align: middle; position: relative; top: -1px;" title="《ダウン》">
            <rect x="1.821" y="7.977" width="20.357" height="14.567" style="stroke-width: 1; fill: rgb(255, 255, 255); stroke: rgb(0, 0, 0); filter: url(#outline-filter-0);" rx="2.154" ry="2.154"></rect>
            <path d="M 3.344 3.456 L 3.987 3.456 C 8.978 3.456 13.376 5.893 13.376 12.736 C 13.376 13.406 13.454 14.118 13.454 14.88" style="fill: none; stroke-width: 4;"></path>
            <path d="M 4.66 1.55 L 5.303 1.55 C 8.05 1.582 11.109 2.353 13.164 4.1 C 15.201 5.831 16.692 8.98 16.692 12.83 C 16.692 13.022 16.701 13.333 16.713 13.66 L 20.336 13.66 L 14.958 18.156 L 9.579 13.66 L 12.71 13.66 C 12.699 13.366 12.692 13.07 12.692 12.83 C 12.692 9.837 11.984 8.346 10.574 7.148 C 9.182 5.965 7.547 5.518 5.303 5.55 L 4.66 5.55 L 4.66 1.55 Z" style="stroke: rgb(255, 255, 255); paint-order: stroke; stroke-width: 2px;"></path>
        </svg>
    }
}

/// 【ガードアイコン】アイコン（【】形式）
#[component]
fn IconGuard() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 24 24" style="vertical-align: middle; position: relative; top: -1px;" title="【ガード】">
            <path style="stroke-width: 5px; stroke: rgb(0, 0, 0);" d="M 5.332 4.682 L 12 3.079 L 18.668 4.682 L 18.668 7.716 L 20.934 9.104 C 20.99 12.702 16.448 19.578 12.554 20.784 C 12.554 20.784 12.187 20.949 12 20.917 C 11.813 20.949 11.446 20.784 11.446 20.784 C 7.552 19.578 3.01 12.702 3.066 9.104 L 5.332 7.716 L 5.332 4.682 Z"></path>
            <path style="stroke: rgb(255, 255, 255); stroke-width: 2px;" d="M 5.332 4.682 L 12 3.079 L 18.668 4.682 L 18.668 7.716 L 20.934 9.104 C 20.99 12.702 16.448 19.578 12.554 20.784 C 12.554 20.784 12.187 20.949 12 20.917 C 11.813 20.949 11.446 20.784 11.446 20.784 C 7.552 19.578 3.01 12.702 3.066 9.104 L 5.332 7.716 L 5.332 4.682 Z"></path>
            <path d="M 7.733 7.595 Q 7.733 7.299 7.845 7.036 Q 7.958 6.772 8.155 6.579 Q 8.352 6.385 8.615 6.269 Q 8.879 6.153 9.174 6.153 L 14.644 6.153 Q 14.94 6.153 15.203 6.269 Q 15.467 6.385 15.664 6.579 Q 15.861 6.772 15.973 7.036 Q 16.086 7.299 16.086 7.595 L 16.086 8.895 L 14.644 8.895 L 14.644 7.595 L 9.174 7.595 L 9.174 14.795 L 14.644 14.795 L 14.644 12.348 L 11.909 12.348 L 11.909 10.906 L 16.086 10.906 L 16.086 14.795 Q 16.086 15.09 15.973 15.354 Q 15.861 15.617 15.664 15.814 Q 15.467 16.011 15.203 16.124 Q 14.94 16.236 14.644 16.236 L 9.174 16.236 Q 8.879 16.236 8.615 16.124 Q 8.352 16.011 8.155 15.814 Q 7.958 15.617 7.845 15.354 Q 7.733 15.09 7.733 14.795 Z" style="fill: rgb(255, 255, 255); text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 【ライフバースト】アイコン（【】形式）
#[component]
fn IconLifeBurst2() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 32 32" style="vertical-align: middle; position: relative; top: -1px;" title="【ライフバースト】">
            <path d="M 20.173 6.827 L 31.609 6.827 L 25.89 16.122 L 31.609 25.418 L 20.173 25.418 L 15.939 32.297 L 11.707 25.418 L 0.269 25.418 L 5.988 16.122 L 0.269 6.827 L 11.707 6.827 L 15.939 -0.053 L 20.173 6.827 Z" fill="white" stroke-width="1.363" stroke="transparent"></path>
            <path d="M 19.844 7.794 L 16 1.546 L 12.156 7.794 C 12.156 7.794 2.063 7.794 2.063 7.794 L 7.11 15.997 C 7.11 15.997 2.063 24.201 2.063 24.201 L 12.156 24.201 C 12.156 24.201 16 30.45 16 30.45 L 19.844 24.201 C 19.844 24.201 29.939 24.201 29.939 24.201 L 24.891 15.997 C 24.891 15.997 29.939 7.794 29.939 7.794 L 19.844 7.794 Z M 18.655 22.132 L 16 17.953 L 13.347 22.132 L 16 26.447 L 18.655 22.132 Z M 10.88 9.891 L 14.759 15.997 L 10.88 22.104 L 5.816 22.104 C 5.816 22.104 9.572 15.997 9.572 15.997 L 5.816 9.891 L 10.88 9.891 Z M 21.122 9.891 L 26.185 9.891 C 26.185 9.891 22.428 15.997 22.428 15.997 L 26.185 22.104 L 21.122 22.104 L 17.243 15.997 L 21.122 9.891 Z M 13.347 9.863 L 16 5.548 L 18.655 9.863 L 16 14.041 L 13.347 9.863 Z" stroke-width="1.049" fill="black" stroke="transparent" fill-rule="evenodd"></path>
        </svg>
    }
}

/// 《チーム》アイコン
#[component]
fn IconTeam() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-5 h-5 leading-5 bg-indigo-600 text-white text-xs font-bold rounded border border-white" title="《チーム》">
            "T"
        </span>
    }
}

/// 《ライフバースト》アイコン（《》形式）
#[component]
fn IconLifeBurst() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-gray-900 text-white text-xs font-bold rounded border border-white" title="《ライフバースト》">
            "LB"
        </span>
    }
}

/// 《プリパラ》アイコン
#[component]
fn IconPripara() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-pink-400 text-white text-xs font-bold rounded border border-white" title="《プリパラ》">
            "PP"
        </span>
    }
}

/// 《にじさんじ》アイコン
#[component]
fn IconNijisanji() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-rainbow text-white text-xs font-bold rounded border border-white" title="《にじさんじ》" style="background: linear-gradient(45deg, #ff0000, #ff8000, #ffff00, #00ff00, #0080ff, #8000ff);">
            "NJ"
        </span>
    }
}

/// 《ディソナ》アイコン
#[component]
fn IconDissona() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-red-500 text-white text-xs font-bold rounded border border-white" title="《ディソナ》">
            "DS"
        </span>
    }
}

/// 《電音部》アイコン
#[component]
fn IconDenonbu() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-yellow-500 text-black text-xs font-bold rounded border border-white" title="《電音部》">
            "DN"
        </span>
    }
}

/// 《ブルーアーカイブ》アイコン
#[component]
fn IconBlueArchive() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-sky-500 text-white text-xs font-bold rounded border border-white" title="《ブルーアーカイブ》">
            "BL"
        </span>
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use leptos::*;

    #[test]
    fn test_icon_component_rendering() {
        // アイコンコンポーネントが正常に作成されることを確認
        let cip = IconCip();
        let auto = IconAuto();
        
        // コンポーネントが作成されることを確認（実際の描画テストは統合テストで）
        assert!(true); // 基本的なコンパイル確認
    }
}