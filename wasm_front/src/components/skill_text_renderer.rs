//! スキルテキストレンダリングコンポーネント
//! 
//! 符号化されたスキルテキストを解析し、テキストとアイコンコンポーネントを組み合わせて表示する。

use leptos::prelude::*;
use icon_encoder::{decode_skill_text, TextSegment};

/// スキルテキストレンダリングコンポーネント
/// 
/// 符号化されたスキルテキストを受け取り、アイコンコンポーネントと組み合わせてレンダリングする。
/// 
/// # Props
/// * `skill_text` - 符号化済みスキルテキスト（例："[c]：効果を発動する"）
#[component]
pub fn SkillTextRenderer(
    /// 符号化済みスキルテキスト
    skill_text: String,
) -> impl IntoView {
    let segments = decode_skill_text(&skill_text);
    
    view! {
        <span class="skill-text">
            {segments.into_iter().map(|segment| {
                match segment {
                    TextSegment::Text(text) => {
                        view! { 
                            <span class="text-content">{text}</span> 
                        }.into_any()
                    },
                    TextSegment::Icon { code, component } => {
                        render_icon_component(&component, &code)
                    }
                }
            }).collect_view()}
        </span>
    }
}

/// ライフバーストテキストレンダリングコンポーネント
/// 
/// 符号化されたライフバーストテキストを受け取り、アイコンコンポーネントと組み合わせてレンダリングする。
/// 
/// # Props
/// * `burst_text` - 符号化済みライフバーストテキスト
#[component]
pub fn BurstTextRenderer(
    /// 符号化済みライフバーストテキスト
    burst_text: String,
) -> impl IntoView {
    // ライフバーストテキストもスキルテキストと同じ処理を使用
    view! {
        <SkillTextRenderer skill_text=burst_text />
    }
}

/// アイコンコンポーネントを定義し、レンダリング関数を自動生成するマクロ
/// 
/// # 使用例
/// ```
/// define_icon_components! {
///     "IconCip" => IconCip(),
///     "IconAuto" => IconAuto(),
///     // ...
/// }
/// ```
macro_rules! define_icon_components {
    ($($component_name:literal => $component_func:ident()),* $(,)?) => {
        /// アイコンコンポーネントをレンダリングする（マクロで自動生成）
        /// 
        /// コンポーネント名に基づいて適切なアイコンコンポーネントを返す。
        /// 
        /// # Arguments
        /// * `component_name` - コンポーネント名（例："IconCip"）
        /// * `code` - アイコンコード（例："c"）
        /// 
        /// # Returns
        /// アイコンコンポーネントまたはフォールバック表示
        fn render_icon_component(component_name: &str, code: &str) -> leptos::prelude::AnyView {
            match component_name {
                $(
                    $component_name => view! { <$component_func /> }.into_any(),
                )*
                // 未知のコンポーネント名の場合はフォールバック表示
                _ => view! { 
                    <span class="icon-fallback bg-gray-200 text-gray-600 px-1 py-0.5 rounded text-xs" title=format!("Unknown icon: {}", component_name)>
                        {format!("[{}]", code)}
                    </span> 
                }.into_any(),
            }
        }
    };
}

/// アイコンコンポーネントとその実装を一括定義するマクロ
/// 
/// # 使用例
/// ```
/// define_icon_with_impl! {
///     IconNewFeature, "IconNewFeature" => {
///         view! {
///             <span class="inline-block w-5 h-5 bg-purple-500 text-white text-xs font-bold rounded text-center leading-5" title="【新機能】">
///                 "新"
///             </span>
///         }
///     }
/// }
/// ```
macro_rules! define_icon_with_impl {
    ($($component_func:ident, $component_name:literal => $impl_block:block),* $(,)?) => {
        $(
            #[component]
            fn $component_func() -> impl IntoView {
                $impl_block
            }
        )*
        
        // 既存のdefine_icon_components!に新しいコンポーネントを追加
        // （注意：既存のマクロ呼び出しを手動で更新する必要があります）
    };
}

// アイコンコンポーネントの定義とレンダリング関数の自動生成
define_icon_components! {
    // タイミングアイコン
    "IconCip" => IconCip(),
    "IconBondCip" => IconBondCip(),
    "IconAuto" => IconAuto(),
    "IconActivated" => IconActivated(),
    "IconPassive" => IconPassive(),
    
    // アビリティアイコン
    "IconAssassin" => IconAssassin(),
    "IconCharm" => IconCharm(),
    "IconGuard" => IconGuard(),
    "IconLancer" => IconLancer(),
    "IconDoubleCrash" => IconDoubleCrash(),
    "IconTripleCrash" => IconTripleCrash(),
    "IconBanish" => IconBanish(),
    "IconFreeze" => IconFreeze(),
    "IconLifeBurst2" => IconLifeBurst2(),
    
    // ゲームメカニクスアイコン
    "IconGuardIcon" => IconGuardIcon(),
    "IconCraft" => IconCraft(),
    "IconGrow" => IconGrow(),
    "IconTeam" => IconTeam(),
    "IconServant" => IconServant(),
    "IconLifeBurst" => IconLifeBurst(),
    "IconRecollect" => IconRecollect(),
    
    // コラボアイコン
    "IconPripara" => IconPripara(),
    "IconNijisanji" => IconNijisanji(),
    "IconDissona" => IconDissona(),
    "IconDenonbu" => IconDenonbu(),
    "IconBlueArchive" => IconBlueArchive(),
}

// アイコンコンポーネントの定義
// 実際の実装では svg_definition.rs の既存アイコンを流用したり、新しいアイコンを定義したりする

/// 【出】アイコン（Comes into play）
#[component]
fn IconCip() -> impl IntoView {
    view! {
        <svg class="inline-block" width="1rem" height="1rem" viewBox="0 0 70 64" style="vertical-align: middle;" title="【出】">
            <path d="M 0.622 64 L 0.622 0 L 58.6 0 L 69.846 32 L 58.6 64 L 0.622 64 Z" style="fill: white; stroke-width: 1.074;"></path>
            <rect width="69.705" height="64" style="fill: none; stroke-width: 0.974;"></rect>
            <path d="M 3.017 61.786 L 3.017 2.214 L 56.983 2.214 L 67.451 32 L 56.983 61.786 L 3.017 61.786 Z" style="stroke-width: 1; fill: rgb(0, 98, 241);"></path>
            <path d="M 7.413 53.977 L 7.413 36.789 Q 7.413 35.933 7.927 35.419 Q 8.441 34.905 9.297 34.905 L 14.265 34.905 Q 15.121 34.905 15.635 35.419 Q 16.149 35.933 16.149 36.789 L 16.149 45.754 Q 16.149 46.611 16.663 47.125 Q 17.177 47.638 18.033 47.638 L 25.228 47.638 Q 26.084 47.638 26.598 47.125 Q 27.112 46.611 27.112 45.754 L 27.112 34.277 Q 27.112 33.421 26.598 32.907 Q 26.084 32.393 25.228 32.393 L 11.124 32.393 Q 10.268 32.393 9.754 31.879 Q 9.24 31.365 9.24 30.508 L 9.24 12.465 Q 9.24 11.608 9.754 11.094 Q 10.268 10.581 11.124 10.581 L 16.377 10.581 Q 17.234 10.581 17.748 11.094 Q 18.262 11.608 18.262 12.465 L 18.262 22.457 Q 18.262 23.314 18.776 23.828 Q 19.29 24.342 20.146 24.342 L 25.228 24.342 Q 26.084 24.342 26.598 23.828 Q 27.112 23.314 27.112 22.457 L 27.112 8.239 Q 27.112 7.383 27.626 6.869 Q 28.14 6.355 28.997 6.355 L 34.078 6.355 Q 34.935 6.355 35.449 6.869 Q 35.963 7.383 35.963 8.239 L 35.963 22.457 Q 35.963 23.314 36.477 23.828 Q 36.991 24.342 37.847 24.342 L 42.815 24.342 Q 43.671 24.342 44.185 23.828 Q 44.699 23.314 44.699 22.457 L 44.699 12.465 Q 44.699 11.608 45.213 11.094 Q 45.727 10.581 46.583 10.581 L 51.894 10.581 Q 52.75 10.581 53.264 11.094 Q 53.778 11.608 53.778 12.465 L 53.778 30.508 Q 53.778 31.365 53.264 31.879 Q 52.75 32.393 51.894 32.393 L 37.847 32.393 Q 36.991 32.393 36.477 32.907 Q 35.963 33.421 35.963 34.277 L 35.963 45.754 Q 35.963 46.611 36.477 47.125 Q 36.991 47.638 37.847 47.638 L 45.099 47.638 Q 45.955 47.638 46.469 47.125 Q 46.983 46.611 46.983 45.754 L 46.983 36.789 Q 46.983 35.933 47.497 35.419 Q 48.011 34.905 48.867 34.905 L 53.835 34.905 Q 54.692 34.905 55.205 35.419 Q 55.719 35.933 55.719 36.789 L 55.719 53.977 Q 55.719 54.833 55.205 55.347 Q 54.692 55.861 53.835 55.861 L 9.297 55.861 Q 8.441 55.861 7.927 55.347 Q 7.413 54.833 7.413 53.977 Z" style="fill: rgb(255, 255, 255); text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 【絆出】アイコン（Bond comes into play）
#[component]
fn IconBondCip() -> impl IntoView {
    view! {
        <span class="inline-block w-5 h-5 bg-purple-500 text-white text-xs font-bold rounded text-center leading-5" title="【絆出】">
            "絆"
        </span>
    }
}

/// 【自】アイコン（Auto）
#[component]
fn IconAuto() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 70 64" style="vertical-align: middle;" title="【常】">
          <path d="M 0.622 64 L 0.622 0 L 58.6 0 L 69.846 32 L 58.6 64 L 0.622 64 Z" style="fill: white; stroke-width: 1.074;"></path>
          <rect width="69.705" height="64" style="fill: none; stroke-width: 0.974;"></rect>
          <path d="M 3.017 61.786 L 3.017 2.214 L 56.983 2.214 L 67.451 32 L 56.983 61.786 L 3.017 61.786 Z" style="stroke-width: 1; fill: rgb(255, 0, 0);"></path>
          <path d="M 9.483 26.873 L 9.483 17.759 Q 9.483 16.991 9.944 16.531 Q 10.405 16.07 11.173 16.07 L 16.959 16.07 Q 18.495 16.07 17.727 14.739 L 16.856 13.407 Q 16.651 13.151 16.498 12.921 Q 16.344 12.691 16.191 12.486 Q 15.525 11.564 16.498 11.001 L 21.003 8.646 Q 21.311 8.492 21.72 8.492 Q 22.13 8.492 22.437 8.902 L 24.434 11.667 L 26.123 14.329 Q 26.431 15.046 25.765 15.404 L 25.458 15.558 Q 24.434 16.07 25.56 16.07 L 26.891 16.07 Q 27.659 16.07 28.12 15.609 Q 28.581 15.148 28.581 14.38 L 28.581 10.028 Q 28.581 9.26 29.042 8.799 Q 29.503 8.339 30.271 8.339 L 34.52 8.339 Q 35.288 8.339 35.749 8.799 Q 36.21 9.26 36.21 10.028 L 36.21 14.38 Q 36.21 15.148 36.671 15.609 Q 37.131 16.07 37.899 16.07 L 39.691 16.07 Q 40.357 16.07 39.743 15.814 L 39.231 15.558 L 38.667 15.404 Q 38.207 15.148 38.463 14.739 Q 38.719 14.329 38.975 13.919 Q 39.231 13.51 39.589 12.921 Q 39.947 12.332 40.28 11.692 Q 40.613 11.052 40.818 10.591 Q 41.279 9.67 41.432 9.26 Q 41.944 8.185 43.019 8.595 L 47.576 10.54 Q 48.088 10.745 48.267 11.18 Q 48.447 11.615 48.267 11.974 Q 48.088 12.332 47.96 12.614 Q 47.832 12.895 47.627 13.228 Q 47.423 13.561 47.243 13.919 Q 47.064 14.278 46.859 14.636 Q 46.04 16.07 47.679 16.07 L 53.771 16.07 Q 54.539 16.07 55 16.531 Q 55.461 16.991 55.461 17.759 L 55.461 26.873 Q 55.461 27.641 55 28.102 Q 54.539 28.563 53.771 28.563 L 49.983 28.563 Q 49.215 28.563 48.754 28.102 Q 48.293 27.641 48.293 26.873 L 48.293 23.699 Q 48.293 22.931 47.832 22.47 Q 47.371 22.009 46.603 22.009 L 18.392 22.009 Q 17.624 22.009 17.163 22.47 Q 16.703 22.931 16.703 23.699 L 16.703 26.873 Q 16.703 27.641 16.242 28.102 Q 15.781 28.563 15.013 28.563 L 11.173 28.563 Q 10.405 28.563 9.944 28.102 Q 9.483 27.641 9.483 26.873 Z M 28.581 53.753 L 28.581 44.281 Q 28.581 43.513 28.12 43.052 Q 27.659 42.591 26.891 42.591 L 23.973 42.591 Q 23.205 42.591 22.744 43.052 Q 22.283 43.513 22.283 44.281 L 22.283 51.449 Q 22.283 52.217 21.823 52.678 Q 21.362 53.139 20.594 53.139 L 16.498 53.139 Q 15.73 53.139 15.269 52.678 Q 14.808 52.217 14.808 51.449 L 14.808 38.495 Q 14.808 37.727 15.269 37.267 Q 15.73 36.806 16.498 36.806 L 27.813 36.806 Q 28.581 36.806 28.581 36.012 Q 28.581 35.219 27.813 35.219 L 20.85 35.219 Q 20.082 35.219 19.621 34.758 Q 19.16 34.297 19.16 33.529 L 19.16 25.183 Q 19.16 24.415 19.621 23.955 Q 20.082 23.494 20.85 23.494 L 43.941 23.494 Q 44.709 23.494 45.17 23.955 Q 45.631 24.415 45.631 25.183 L 45.631 33.529 Q 45.631 34.297 45.17 34.758 Q 44.709 35.219 43.941 35.219 L 37.029 35.219 Q 36.21 35.219 36.21 36.012 Q 36.21 36.806 37.029 36.806 L 48.805 36.806 Q 49.573 36.806 50.034 37.267 Q 50.495 37.727 50.495 38.495 L 50.495 47.609 Q 50.495 52.473 46.501 53.292 Q 45.221 53.548 43.583 53.548 L 40.767 53.548 Q 39.589 53.548 39.435 52.371 Q 38.872 49.043 38.36 47.558 Q 38.002 46.534 39.077 46.534 L 41.074 46.534 Q 42.2 46.534 42.559 46.201 Q 42.917 45.868 42.917 44.844 L 42.917 43.718 Q 42.917 42.591 41.791 42.591 L 37.899 42.591 Q 37.131 42.591 36.671 43.052 Q 36.21 43.513 36.21 44.281 L 36.21 53.753 Q 36.21 54.521 35.749 54.982 Q 35.288 55.443 34.52 55.443 L 30.271 55.443 Q 29.503 55.443 29.042 54.982 Q 28.581 54.521 28.581 53.753 Z M 27.147 30.355 L 37.695 30.355 Q 38.667 30.355 38.667 29.356 Q 38.667 28.358 37.695 28.358 L 27.147 28.358 Q 26.123 28.358 26.123 29.356 Q 26.123 30.355 27.147 30.355 Z" style="fill: rgb(255, 255, 255); text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 【起】アイコン（Activated）
#[component]
fn IconActivated() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 70 64" style="vertical-align: middle;" title="【起】">
            <path d="M 0.622 64 L 0.622 0 L 58.6 0 L 69.846 32 L 58.6 64 L 0.622 64 Z" style="fill: white; stroke-width: 1.074;"></path>
            <rect width="69.705" height="64" style="fill: none; stroke-width: 0.974;"></rect>
            <path d="M 3.017 61.786 L 3.017 2.214 L 56.983 2.214 L 67.451 32 L 56.983 61.786 L 3.017 61.786 Z" style="stroke-width: 1; fill: rgb(0, 142, 33);"></path>
            <path d="M 36.068 54.341 Q 30.579 54.341 27.347 53.444 Q 24.115 52.546 21.96 51.469 Q 19.806 50.391 18.42 49.16 Q 17.035 47.929 16.266 47.929 Q 15.291 47.929 14.701 49.57 Q 14.111 51.212 13.444 52.597 Q 13.034 53.469 12.393 53.469 Q 11.751 53.469 11.29 53.264 Q 9.033 52.187 8.109 51.93 Q 6.673 51.366 7.442 49.801 Q 8.212 48.237 8.75 46.364 Q 9.289 44.492 9.597 42.594 Q 10.11 39.259 10.366 34.796 Q 10.366 33.924 10.854 33.437 Q 11.341 32.949 12.213 33.052 L 15.702 33.411 Q 16.984 33.514 16.984 34.796 L 16.83 38.131 Q 16.779 38.592 17.035 39.054 L 18.061 40.747 Q 18.523 41.362 18.523 40.644 L 18.523 31.359 Q 18.523 30.589 18.061 30.128 Q 17.6 29.666 16.83 29.666 L 10.828 29.666 Q 10.059 29.666 9.597 29.204 Q 9.135 28.743 9.135 27.973 L 9.135 25.254 Q 9.135 24.485 9.597 24.023 Q 10.059 23.561 10.828 23.561 L 16.574 23.561 Q 17.343 23.561 17.805 23.1 Q 18.267 22.638 18.267 21.868 L 18.267 21.304 Q 18.267 20.535 17.805 20.073 Q 17.343 19.611 16.574 19.611 L 12.367 19.611 Q 11.598 19.611 11.136 19.15 Q 10.674 18.688 10.674 17.918 L 10.674 15.353 Q 10.674 14.584 11.136 14.122 Q 11.598 13.66 12.367 13.66 L 16.574 13.66 Q 17.343 13.66 17.805 13.199 Q 18.267 12.737 18.267 11.968 L 18.267 9.967 Q 18.267 9.197 18.728 8.736 Q 19.19 8.274 19.959 8.274 L 23.704 8.274 Q 24.474 8.274 24.936 8.736 Q 25.397 9.197 25.397 9.967 L 25.397 11.968 Q 25.397 12.737 25.859 13.199 Q 26.321 13.66 27.09 13.66 L 29.347 13.66 Q 30.117 13.66 30.579 14.122 Q 31.04 14.584 31.04 15.353 L 31.04 17.918 Q 31.04 18.688 30.579 19.15 Q 30.117 19.611 29.347 19.611 L 27.09 19.611 Q 26.321 19.611 25.859 20.073 Q 25.397 20.535 25.397 21.304 L 25.397 21.868 Q 25.397 22.638 25.859 23.1 Q 26.321 23.561 27.09 23.561 L 30.322 23.561 Q 31.092 23.561 31.553 24.023 Q 32.015 24.485 32.015 25.254 L 32.015 27.973 Q 32.015 28.743 31.553 29.204 Q 31.092 29.666 30.322 29.666 L 27.09 29.666 Q 26.321 29.666 25.859 30.128 Q 25.397 30.589 25.397 31.359 L 25.397 31.821 Q 25.397 32.59 25.859 33.052 Q 26.321 33.514 27.09 33.514 L 29.963 33.514 Q 30.732 33.514 31.194 33.975 Q 31.656 34.437 31.656 35.206 L 31.656 38.387 Q 31.656 39.157 31.194 39.618 Q 30.732 40.08 29.963 40.08 L 27.09 40.08 Q 26.321 40.08 25.859 40.542 Q 25.397 41.003 25.397 41.773 L 25.397 45.159 Q 25.397 46.339 26.526 46.698 Q 30.476 47.724 34.99 47.724 Q 49.354 47.724 54.69 46.903 Q 55.767 46.8 55.459 47.826 Q 54.587 50.596 54.484 51.674 Q 54.382 52.751 54.331 53.059 Q 54.177 54.341 52.945 54.341 Z M 39.402 45.159 Q 36.735 45.159 35.76 44.646 Q 33.81 43.568 33.81 41.209 L 33.81 24.844 Q 33.81 24.074 34.272 23.613 Q 34.734 23.151 35.503 23.151 L 44.224 23.151 Q 44.994 23.151 45.456 22.689 Q 45.917 22.228 45.917 21.458 L 45.917 18.739 Q 45.917 17.97 45.456 17.508 Q 44.994 17.046 44.224 17.046 L 35.298 17.046 Q 34.529 17.046 34.067 16.585 Q 33.605 16.123 33.605 15.353 L 33.605 12.378 Q 33.605 11.608 34.067 11.147 Q 34.529 10.685 35.298 10.685 L 51.509 10.685 Q 52.279 10.685 52.74 11.147 Q 53.202 11.608 53.202 12.378 L 53.202 27.819 Q 53.202 28.589 52.74 29.05 Q 52.279 29.512 51.509 29.512 L 42.634 29.512 Q 41.865 29.512 41.403 29.974 Q 40.941 30.436 40.941 31.205 L 40.941 36.951 Q 40.941 37.669 41.3 37.9 Q 41.659 38.131 42.583 38.131 L 46.071 38.131 Q 47.764 38.131 48.277 37.207 Q 48.688 36.592 48.944 34.642 Q 49.047 33.565 50.073 33.975 Q 50.586 34.18 51.15 34.411 Q 51.714 34.642 52.33 34.822 Q 52.945 35.001 53.612 35.206 L 54.741 35.463 Q 55.87 35.822 55.664 36.899 Q 54.997 41.362 53.664 43.004 Q 51.919 45.159 47.969 45.159 Z" style="fill: rgb(255, 255, 255); text-wrap-mode: nowrap;"></path>
        </svg>        
    }
}

/// 【常】アイコン（Passive）
#[component]
fn IconPassive() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 24 24" style="vertical-align: middle;" title="【自】">
            <path d="M 0.399 23.986 L 0.399 -0.036 L 19.831 -0.036 L 23.6 11.975 L 19.831 23.986 L 0.399 23.986 Z" style="fill: white; stroke-width: 1.074;"></path>
            <rect x="0.319" y="-0.036" width="23.362" height="24.072" style="fill: none; stroke-width: 0.974;"></rect>
            <path d="M 1.33 23.203 L 1.33 0.797 L 19.416 0.797 L 22.926 12 L 19.416 23.203 L 1.33 23.203 Z" style="stroke-width: 1; fill: color(srgb 100% 67.5% 0%);"></path>
            <path d="M 3.897 19.979 L 3.897 5.294 Q 3.897 4.977 4.087 4.787 Q 4.277 4.597 4.594 4.597 L 7.611 4.597 Q 8.138 4.597 8.265 4.112 L 8.455 3.542 L 8.835 2.192 Q 8.898 1.896 9.214 1.896 L 12.168 2.15 Q 12.422 2.171 12.517 2.318 Q 12.612 2.466 12.538 2.635 Q 12.464 2.804 12.411 2.93 Q 12.358 3.057 12.295 3.205 L 11.957 3.901 Q 11.81 4.217 11.926 4.407 Q 12.042 4.597 12.401 4.597 L 17.844 4.597 Q 18.161 4.597 18.351 4.787 Q 18.541 4.977 18.541 5.294 L 18.541 19.979 Q 18.541 20.296 18.351 20.485 Q 18.161 20.675 17.844 20.675 L 4.594 20.675 Q 4.277 20.675 4.087 20.485 Q 3.897 20.296 3.897 19.979 Z M 7.864 9.113 L 14.574 9.113 Q 14.89 9.113 15.08 8.923 Q 15.27 8.733 15.27 8.416 L 15.27 8.015 Q 15.27 7.699 15.08 7.509 Q 14.89 7.319 14.574 7.319 L 7.864 7.319 Q 7.548 7.319 7.358 7.509 Q 7.168 7.699 7.168 8.015 L 7.168 8.416 Q 7.168 8.733 7.358 8.923 Q 7.548 9.113 7.864 9.113 Z M 7.864 13.544 L 14.574 13.544 Q 14.89 13.544 15.08 13.354 Q 15.27 13.164 15.27 12.847 L 15.27 12.467 Q 15.27 12.151 15.08 11.961 Q 14.89 11.771 14.574 11.771 L 7.864 11.771 Q 7.548 11.771 7.358 11.961 Q 7.168 12.151 7.168 12.467 L 7.168 12.847 Q 7.168 13.164 7.358 13.354 Q 7.548 13.544 7.864 13.544 Z M 7.864 17.953 L 14.574 17.953 Q 14.89 17.953 15.08 17.764 Q 15.27 17.574 15.27 17.257 L 15.27 16.898 Q 15.27 16.582 15.08 16.392 Q 14.89 16.202 14.574 16.202 L 7.864 16.202 Q 7.548 16.202 7.358 16.392 Q 7.168 16.582 7.168 16.898 L 7.168 17.257 Q 7.168 17.574 7.358 17.764 Q 7.548 17.953 7.864 17.953 Z" style="fill: rgb(255, 255, 255); text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 【アサシン】アイコン
#[component]
fn IconAssassin() -> impl IntoView {
    view! {
        <span class="inline-block w-6 h-5 bg-red-600 text-white text-xs font-bold rounded text-center leading-5" title="【アサシン】">
            "AS"
        </span>
    }
}

/// 【チャーム】アイコン
#[component]
fn IconCharm() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-pink-500 text-white text-xs font-bold rounded" title="【チャーム】">
            "CH"
        </span>
    }
}


/// 【リコレクト】アイコン
#[component]
fn IconRecollect() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 118 24" style="vertical-align: middle;" title="【リコレクト】">
            <rect x="0" y="0" width="110" height="24" style="stroke: rgb(0, 0, 0); stroke-width: 2px; fill: rgb(255, 255, 255);"></rect>
            <path d="M 4.281 21.076 L 4.281 15.398 L 9.176 12 L 4.281 8.602 L 4.281 2.924 L 15.456 2.924 L 15.456 8.602 L 10.562 12 L 15.456 15.398 L 15.456 21.076 L 4.281 21.076 Z" style="stroke: rgb(0, 0, 0); fill: rgb(255, 255, 255);"></path>
            <path d="M 27.105 2.272 Q 27.105 1.88 27.366 1.698 Q 27.549 1.567 27.862 1.567 L 30.289 1.567 Q 30.759 1.567 31.033 1.854 Q 31.307 2.141 31.307 2.585 L 31.307 9.006 Q 31.307 13.86 29.428 16.992 Q 27.471 20.202 23.321 22.238 Q 23.112 22.343 22.812 22.343 Q 22.512 22.343 22.303 22.029 Q 22.146 21.821 22.068 21.703 Q 21.99 21.586 21.859 21.39 Q 21.729 21.194 21.533 20.92 Q 21.337 20.646 21.168 20.463 Q 20.998 20.281 20.893 20.163 Q 20.789 20.046 20.685 19.941 Q 20.424 19.68 20.424 19.419 Q 20.424 19.054 20.893 18.845 Q 24.339 17.358 25.8 15.009 Q 27.236 12.764 27.236 9.006 L 27.236 6.187 L 27.131 2.924 Z M 19.902 13.416 L 19.902 11.85 Q 19.902 11.746 19.745 5.639 Q 19.641 2.898 19.641 2.898 Q 19.641 2.585 19.836 2.376 Q 20.032 2.167 20.398 2.167 L 22.825 2.167 Q 23.164 2.167 23.373 2.324 Q 23.66 2.533 23.66 2.976 L 23.66 4.542 Q 23.66 4.803 23.817 10.519 Q 23.869 11.746 23.895 12.268 Q 23.921 12.79 23.921 12.947 Q 23.921 13.103 23.934 13.208 Q 23.947 13.312 23.947 13.364 Q 23.947 13.782 23.66 13.991 Q 23.451 14.173 23.086 14.173 L 20.685 14.199 Q 20.345 14.199 20.124 13.978 Q 19.902 13.756 19.902 13.416 Z M 35.167 6.891 Q 35.167 6.422 35.441 6.174 Q 35.715 5.926 36.159 5.926 L 37.385 5.952 Q 39.03 6.004 40.517 6.004 Q 42.083 6.004 46.129 5.952 Q 47.46 5.9 48.726 5.874 Q 49.992 5.847 50.018 5.847 Q 50.461 5.847 50.722 6.122 Q 50.983 6.396 50.983 6.865 L 50.983 17.279 Q 50.983 17.749 50.709 18.023 Q 50.435 18.297 49.731 18.297 L 48.165 18.297 Q 47.225 18.297 46.181 18.323 Q 45.137 18.349 44.067 18.362 Q 42.997 18.375 41.77 18.402 Q 40.543 18.428 39.134 18.48 Q 36.524 18.584 36.185 18.584 Q 35.845 18.584 35.558 18.336 Q 35.271 18.088 35.245 17.645 Q 35.141 15.531 35.141 15.478 Q 35.141 15.035 35.402 14.761 Q 35.663 14.487 36.106 14.487 Q 36.159 14.487 36.498 14.487 Q 37.959 14.487 40.517 14.513 L 42.162 14.513 Q 42.657 14.513 46.311 14.434 Q 46.546 14.434 46.69 14.304 Q 46.833 14.173 46.833 13.938 L 46.833 10.284 Q 46.833 10.023 46.69 9.88 Q 46.546 9.736 46.285 9.736 L 44.876 9.736 L 42.292 9.762 Q 41.613 9.789 40.804 9.789 Q 39.839 9.789 38.051 9.88 Q 36.263 9.971 36.211 9.971 Q 35.819 9.971 35.545 9.71 Q 35.271 9.449 35.245 9.006 Q 35.245 9.006 35.206 7.962 Q 35.167 6.918 35.167 6.891 Z M 53.747 10.467 Q 53.747 7.361 53.616 5.143 Q 53.616 5.091 53.616 5.038 Q 53.616 4.621 53.89 4.347 Q 54.164 4.073 54.66 4.073 L 56.67 4.073 Q 57.192 4.073 57.453 4.36 Q 57.714 4.647 57.714 5.091 L 57.688 6.552 Q 57.635 8.17 57.635 10.284 L 57.635 14.095 Q 57.635 14.382 57.753 14.513 Q 57.87 14.643 58.027 14.643 Q 58.184 14.643 58.366 14.591 Q 63.847 12.164 66.849 10.154 Q 68.154 9.293 69.302 8.301 Q 69.563 8.118 69.785 8.118 Q 70.007 8.118 70.137 8.275 Q 70.216 8.405 70.242 8.627 Q 70.268 8.849 70.268 9.006 Q 70.268 9.162 70.32 9.475 Q 70.424 10.311 70.555 10.859 L 70.555 10.885 Q 70.633 11.355 70.685 11.589 Q 70.738 11.824 70.738 11.929 Q 70.738 12.346 70.346 12.633 Q 65.883 15.974 58.862 18.897 Q 57.479 19.498 56.2 19.889 Q 56.017 19.941 55.887 19.941 Q 55.547 19.941 55.286 19.733 L 54.086 18.819 Q 53.616 18.506 53.616 18.01 Q 53.616 17.958 53.642 17.697 Q 53.72 17.044 53.72 16 Q 53.72 14.956 53.747 14.147 Z M 82.114 9.006 Q 82.114 8.849 81.853 8.849 L 77.938 9.058 Q 77.703 9.058 77.546 9.24 Q 75.51 11.746 72.979 13.625 Q 72.77 13.808 72.444 13.808 Q 72.117 13.808 71.935 13.599 Q 71.909 13.547 71.856 13.495 Q 71.804 13.469 71.778 13.443 L 71.595 13.234 Q 70.63 12.268 70.134 11.903 Q 69.768 11.642 69.768 11.355 Q 69.768 11.067 70.108 10.859 Q 72.222 9.501 74.153 7.205 Q 76.059 4.882 77.05 2.585 Q 77.337 1.932 77.912 1.932 Q 78.12 1.932 78.329 2.011 L 80.339 2.742 Q 80.73 2.872 80.861 3.185 Q 80.913 3.342 80.913 3.498 Q 80.913 3.733 80.744 4.099 Q 80.574 4.464 80.404 4.803 Q 80.235 5.143 80.235 5.247 Q 80.261 5.273 80.313 5.273 Q 80.313 5.273 80.417 5.273 Q 83.21 5.273 84.933 4.986 L 84.959 4.986 Q 85.324 4.986 85.559 5.117 L 86.994 5.9 Q 87.543 6.213 87.543 6.735 Q 87.543 6.891 87.49 7.074 Q 85.768 11.981 81.905 15.974 Q 78.538 19.419 73.292 22.029 Q 73.109 22.108 72.796 22.108 Q 72.405 22.108 72.117 21.638 Q 71.726 20.959 70.604 19.576 Q 70.369 19.341 70.369 19.08 Q 70.369 18.715 70.812 18.558 Q 76.137 16.47 79.843 12.294 Q 81.096 10.911 82.009 9.319 Q 82.114 9.11 82.114 9.006 Z M 93.673 21.038 L 93.673 3.316 Q 93.673 2.872 93.947 2.585 Q 94.221 2.298 94.691 2.298 L 96.674 2.298 Q 97.118 2.298 97.405 2.585 Q 97.692 2.872 97.692 3.316 L 97.692 8.718 Q 97.692 8.823 97.692 8.901 Q 97.718 8.875 97.953 8.562 Q 98.266 8.118 98.658 8.118 Q 99.049 8.118 99.284 8.275 Q 99.519 8.431 99.741 8.575 Q 99.963 8.718 100.38 9.006 Q 101.529 9.736 102.755 10.493 Q 104.06 11.276 105.418 11.877 Q 105.835 12.085 105.835 12.451 Q 105.835 12.686 105.653 12.921 Q 105.522 13.103 105.17 13.547 Q 104.817 13.991 104.165 15.113 Q 103.904 15.557 103.512 15.557 Q 103.199 15.557 103.016 15.426 Q 102.834 15.296 102.638 15.191 Q 102.442 15.087 102.155 14.904 Q 100.38 13.808 98.057 12.216 Q 97.901 12.085 97.823 12.085 Q 97.744 12.085 97.718 12.151 Q 97.692 12.216 97.692 12.399 L 97.692 21.038 Q 97.692 21.481 97.405 21.768 Q 97.118 22.056 96.674 22.056 L 94.691 22.056 Q 94.221 22.056 93.947 21.768 Q 93.673 21.481 93.673 21.038 Z" style="fill: rgb(51, 51, 51); text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 【ガードアイコン】アイコン（【】形式）
#[component]
fn IconGuard() -> impl IntoView {
    view! {
        <svg class="inline-block" height="1rem" viewBox="0 0 24 24" style="vertical-align: middle;" title="【ガード】">
            <path style="stroke-width: 5px; stroke: rgb(0, 0, 0);" d="M 5.332 4.682 L 12 3.079 L 18.668 4.682 L 18.668 7.716 L 20.934 9.104 C 20.99 12.702 16.448 19.578 12.554 20.784 C 12.554 20.784 12.187 20.949 12 20.917 C 11.813 20.949 11.446 20.784 11.446 20.784 C 7.552 19.578 3.01 12.702 3.066 9.104 L 5.332 7.716 L 5.332 4.682 Z"></path>
            <path style="stroke: rgb(255, 255, 255); stroke-width: 2px;" d="M 5.332 4.682 L 12 3.079 L 18.668 4.682 L 18.668 7.716 L 20.934 9.104 C 20.99 12.702 16.448 19.578 12.554 20.784 C 12.554 20.784 12.187 20.949 12 20.917 C 11.813 20.949 11.446 20.784 11.446 20.784 C 7.552 19.578 3.01 12.702 3.066 9.104 L 5.332 7.716 L 5.332 4.682 Z"></path>
            <path d="M 7.733 7.595 Q 7.733 7.299 7.845 7.036 Q 7.958 6.772 8.155 6.579 Q 8.352 6.385 8.615 6.269 Q 8.879 6.153 9.174 6.153 L 14.644 6.153 Q 14.94 6.153 15.203 6.269 Q 15.467 6.385 15.664 6.579 Q 15.861 6.772 15.973 7.036 Q 16.086 7.299 16.086 7.595 L 16.086 8.895 L 14.644 8.895 L 14.644 7.595 L 9.174 7.595 L 9.174 14.795 L 14.644 14.795 L 14.644 12.348 L 11.909 12.348 L 11.909 10.906 L 16.086 10.906 L 16.086 14.795 Q 16.086 15.09 15.973 15.354 Q 15.861 15.617 15.664 15.814 Q 15.467 16.011 15.203 16.124 Q 14.94 16.236 14.644 16.236 L 9.174 16.236 Q 8.879 16.236 8.615 16.124 Q 8.352 16.011 8.155 15.814 Q 7.958 15.617 7.845 15.354 Q 7.733 15.09 7.733 14.795 Z" style="fill: rgb(255, 255, 255); text-wrap-mode: nowrap;"></path>
        </svg>
    }
}

/// 【ランサー】アイコン
#[component]
fn IconLancer() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-yellow-600 text-white text-xs font-bold rounded" title="【ランサー】">
            "LA"
        </span>
    }
}

/// 【ダブルクラッシュ】アイコン
#[component]
fn IconDoubleCrash() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-red-700 text-white text-xs font-bold rounded" title="【ダブルクラッシュ】">
            "DC"
        </span>
    }
}

/// 【トリプルクラッシュ】アイコン
#[component]
fn IconTripleCrash() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-red-800 text-white text-xs font-bold rounded" title="【トリプルクラッシュ】">
            "TC"
        </span>
    }
}

/// 【バニッシュ】アイコン
#[component]
fn IconBanish() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-purple-600 text-white text-xs font-bold rounded" title="【バニッシュ】">
            "BA"
        </span>
    }
}

/// 【フリーズ】アイコン
#[component]
fn IconFreeze() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-cyan-500 text-white text-xs font-bold rounded" title="【フリーズ】">
            "FR"
        </span>
    }
}

/// 【ライフバースト】アイコン（【】形式）
#[component]
fn IconLifeBurst2() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-gray-800 text-white text-xs font-bold rounded" title="【ライフバースト】">
            "LB"
        </span>
    }
}

/// 《ガードアイコン》アイコン（《》形式）
#[component]
fn IconGuardIcon() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-blue-800 text-white text-xs font-bold rounded border border-white" title="《ガードアイコン》">
            "GI"
        </span>
    }
}

/// 《クラフト》アイコン
#[component]
fn IconCraft() -> impl IntoView {
    view! {
        <svg class="inline-block" width="1rem" height="1rem" viewBox="0 0 24 24" style="vertical-align: middle;" title="《クラフト》">
            // 背景（二重の境界線で《》形式を表現）
            <rect width="22" height="22" x="1" y="1" rx="2" fill="#d97706" stroke="#92400e" stroke-width="1"/>
            <rect width="18" height="18" x="3" y="3" rx="1" fill="#f59e0b" stroke="#d97706" stroke-width="0.5"/>
            // ハンマーアイコン
            <path d="M8 12 L12 8 L13 9 L16 6 L18 8 L15 11 L16 12 L12 16 L8 12 Z" fill="white"/>
            <rect x="6" y="14" width="2" height="6" rx="1" fill="white"/>
        </svg>
    }
}

/// 《グロウ》アイコン
#[component]
fn IconGrow() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-emerald-600 text-white text-xs font-bold rounded border border-white" title="《グロウ》">
            "GR"
        </span>
    }
}

/// 《チーム》アイコン
#[component]
fn IconTeam() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-5 h-5 leading-5 bg-indigo-600 text-white text-xs font-bold rounded border border-white" title="《チーム》">
            "T"
        </span>
    }
}

/// 《サーバント》アイコン
#[component]
fn IconServant() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-slate-600 text-white text-xs font-bold rounded border border-white" title="《サーバント》">
            "SV"
        </span>
    }
}

/// 《ライフバースト》アイコン（《》形式）
#[component]
fn IconLifeBurst() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-gray-900 text-white text-xs font-bold rounded border border-white" title="《ライフバースト》">
            "LB"
        </span>
    }
}

/// 《プリパラ》アイコン
#[component]
fn IconPripara() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-pink-400 text-white text-xs font-bold rounded border border-white" title="《プリパラ》">
            "PP"
        </span>
    }
}

/// 《にじさんじ》アイコン
#[component]
fn IconNijisanji() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-rainbow text-white text-xs font-bold rounded border border-white" title="《にじさんじ》" style="background: linear-gradient(45deg, #ff0000, #ff8000, #ffff00, #00ff00, #0080ff, #8000ff);">
            "NJ"
        </span>
    }
}

/// 《ディソナ》アイコン
#[component]
fn IconDissona() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-red-500 text-white text-xs font-bold rounded border border-white" title="《ディソナ》">
            "DS"
        </span>
    }
}

/// 《電音部》アイコン
#[component]
fn IconDenonbu() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-yellow-500 text-black text-xs font-bold rounded border border-white" title="《電音部》">
            "DN"
        </span>
    }
}

/// 《ブルーアーカイブ》アイコン
#[component]
fn IconBlueArchive() -> impl IntoView {
    view! {
        <span class="inline-block text-center w-6 h-5 leading-5 bg-sky-500 text-white text-xs font-bold rounded border border-white" title="《ブルーアーカイブ》">
            "BL"
        </span>
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use leptos::*;

    #[test]
    fn test_icon_component_rendering() {
        // アイコンコンポーネントが正常に作成されることを確認
        let cip = IconCip();
        let auto = IconAuto();
        
        // コンポーネントが作成されることを確認（実際の描画テストは統合テストで）
        assert!(true); // 基本的なコンパイル確認
    }
}